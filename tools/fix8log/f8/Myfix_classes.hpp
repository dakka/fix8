//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2014-04-27 23:02:33 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-14 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined MAGIC_NUM && MAGIC_NUM > 16785408L
#error Myfix_classes.hpp version 1.2.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Myfix_classes.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_4D796669785F636C61737365732E687070_
#define FIX8_4D796669785F636C61737365732E687070_

namespace FIX8 {
namespace TEX {

//-------------------------------------------------------------------------------------------------
using Myfix_BaseMsgEntry = MsgTable;
/// Compiler generated metadata object, accessed through this function
const F8MetaCntx& ctx();
class Myfix_Router;

//-------------------------------------------------------------------------------------------------
/// Heartbeat (0), admin, 1 field, 0 groups.
class Heartbeat : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Heartbeat() : Message(ctx(), _msgtype(), _traits, 1, &_ftha) {}
   ~Heartbeat() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TestRequest (1), admin, 1 field, 0 groups.
class TestRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TestRequest() : Message(ctx(), _msgtype(), _traits, 1, &_ftha) {}
   ~TestRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ResendRequest (2), admin, 2 fields, 0 groups.
class ResendRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ResendRequest() : Message(ctx(), _msgtype(), _traits, 2, &_ftha) {}
   ~ResendRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Reject (3), admin, 7 fields, 0 groups.
class Reject : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Reject() : Message(ctx(), _msgtype(), _traits, 7, &_ftha) {}
   ~Reject() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SequenceReset (4), admin, 2 fields, 0 groups.
class SequenceReset : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SequenceReset() : Message(ctx(), _msgtype(), _traits, 2, &_ftha) {}
   ~SequenceReset() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logout (5), admin, 3 fields, 0 groups.
class Logout : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Logout() : Message(ctx(), _msgtype(), _traits, 3, &_ftha) {}
   ~Logout() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// IOI (6), application, 143 fields, 10 groups.
class IOI : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   IOI() : Message(ctx(), _msgtype(), _traits, 143, &_ftha)
   {
      _groups.insert({
         { 199, new NoIOIQualifiers },
         { 215, new NoRoutingIDs },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~IOI() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoIOIQualifiers (199), application, 1 field, 0 groups, is unique, hash: 0x80001869
   // IOI::NoIOIQualifiers
   class NoIOIQualifiers : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 199 };

      NoIOIQualifiers() : GroupBase(_fnum) {}
      ~NoIOIQualifiers() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // IOI::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // IOI::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // IOI::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // IOI::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // IOI::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 56 fields, 2 groups, is unique, hash: 0xf41f8fae
   // IOI::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 56, &_ftha));
         mb->get_groups().insert({
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // IOI::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // IOI::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // IOI::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // IOI::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // IOI::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // IOI::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // IOI::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // IOI::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // IOI::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // IOI::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // IOI::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // IOI::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // IOI::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Advertisement (7), application, 107 fields, 6 groups.
class Advertisement : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Advertisement() : Message(ctx(), _msgtype(), _traits, 107, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~Advertisement() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Advertisement::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // Advertisement::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Advertisement::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // Advertisement::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Advertisement::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Advertisement::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // Advertisement::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // Advertisement::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // Advertisement::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // Advertisement::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // Advertisement::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // Advertisement::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // Advertisement::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // Advertisement::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ExecutionReport (8), application, 326 fields, 16 groups.
class ExecutionReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ExecutionReport() : Message(ctx(), _msgtype(), _traits, 326, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 382, new NoContraBrokers },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 518, new NoContAmts },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1362, new NoFills },
         { 1445, new NoRateSources },
         { 1483, new NoComplexEvents },
      });
   }
   ~ExecutionReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
   // ExecutionReport::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // ExecutionReport::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // ExecutionReport::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // ExecutionReport::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // ExecutionReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoContraBrokers (382), application, 5 fields, 0 groups, is unique, hash: 0x8c0b9037
   // ExecutionReport::NoContraBrokers
   class NoContraBrokers : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 382 };

      NoContraBrokers() : GroupBase(_fnum) {}
      ~NoContraBrokers() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ExecutionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ExecutionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // ExecutionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoContAmts (518), application, 3 fields, 0 groups, shares static data, hash: 0xb32a7415
   // ExecutionReport::NoContAmts
   class NoContAmts : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 518 };

      NoContAmts() : GroupBase(_fnum) {}
      ~NoContAmts() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 76 fields, 4 groups, is unique, hash: 0xcd1cb1e4
   // ExecutionReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 76, &_ftha));
         mb->get_groups().insert({
            { 604, new NoLegSecurityAltID },
            { 670, new NoLegAllocs },
            { 683, new NoLegStipulations },
            { 948, new NoNested3PartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // ExecutionReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegAllocs (670), application, 6 fields, 1 group, shares static data, hash: 0xf1bdc63a
      // ExecutionReport::NoLegs::NoLegAllocs
      class NoLegAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 670 };

         NoLegAllocs() : GroupBase(_fnum) {}
         ~NoLegAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // ExecutionReport::NoLegs::NoLegAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // ExecutionReport::NoLegs::NoLegAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // ExecutionReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNested3PartyIDs (948), application, 4 fields, 1 group, shares static data, hash: 0x1dc2d820
      // ExecutionReport::NoLegs::NoNested3PartyIDs
      class NoNested3PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 948 };

         NoNested3PartyIDs() : GroupBase(_fnum) {}
         ~NoNested3PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({952, new NoNested3PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested3PartySubIDs (952), application, 2 fields, 0 groups, shares static data, hash: 0x237471ed
         // ExecutionReport::NoLegs::NoNested3PartyIDs::NoNested3PartySubIDs
         class NoNested3PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 952 };

            NoNested3PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested3PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // ExecutionReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // ExecutionReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // ExecutionReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // ExecutionReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // ExecutionReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // ExecutionReport::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // ExecutionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // ExecutionReport::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // ExecutionReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // ExecutionReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoFills (1362), application, 5 fields, 1 group, is unique, hash: 0x651ddc6b
   // ExecutionReport::NoFills
   class NoFills : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1362 };

      NoFills() : GroupBase(_fnum) {}
      ~NoFills() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha));
         mb->get_groups().insert({1414, new NoNested4PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested4PartyIDs (1414), application, 4 fields, 1 group, is unique, hash: 0xad97b091
      // ExecutionReport::NoFills::NoNested4PartyIDs
      class NoNested4PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1414 };

         NoNested4PartyIDs() : GroupBase(_fnum) {}
         ~NoNested4PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1413, new NoNested4PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested4PartySubIDs (1413), application, 2 fields, 0 groups, is unique, hash: 0x23b3f727
         // ExecutionReport::NoFills::NoNested4PartyIDs::NoNested4PartySubIDs
         class NoNested4PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1413 };

            NoNested4PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested4PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
   // ExecutionReport::NoRateSources
   class NoRateSources : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1445 };

      NoRateSources() : GroupBase(_fnum) {}
      ~NoRateSources() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // ExecutionReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // ExecutionReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // ExecutionReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReject (9), application, 21 fields, 0 groups.
class OrderCancelReject : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderCancelReject() : Message(ctx(), _msgtype(), _traits, 21, &_ftha) {}
   ~OrderCancelReject() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logon (A), admin, 12 fields, 1 group.
class Logon : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Logon() : Message(ctx(), _msgtype(), _traits, 12, &_ftha)
   {
      _groups.insert({384, new NoMsgTypes });
   }
   ~Logon() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoMsgTypes (384), application, 4 fields, 0 groups, is unique, hash: 0xd4b19af3
   // Logon::NoMsgTypes
   class NoMsgTypes : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 384 };

      NoMsgTypes() : GroupBase(_fnum) {}
      ~NoMsgTypes() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// DerivativeSecurityList (AA), application, 149 fields, 9 groups.
class DerivativeSecurityList : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   DerivativeSecurityList() : Message(ctx(), _msgtype(), _traits, 149, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 457, new NoUnderlyingSecurityAltID },
         { 887, new NoUnderlyingStips },
         { 1058, new NoUndlyInstrumentParties },
         { 1218, new NoDerivativeSecurityAltID },
         { 1286, new NoDerivativeEvents },
         { 1292, new NoDerivativeInstrumentParties },
         { 1310, new NoMarketSegments },
         { 1311, new NoDerivativeInstrAttrib },
      });
   }
   ~DerivativeSecurityList() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 102 fields, 6 groups, is unique, hash: 0x45061012
   // DerivativeSecurityList::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 102, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // DerivativeSecurityList::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // DerivativeSecurityList::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // DerivativeSecurityList::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // DerivativeSecurityList::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // DerivativeSecurityList::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // DerivativeSecurityList::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // DerivativeSecurityList::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // DerivativeSecurityList::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // DerivativeSecurityList::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // DerivativeSecurityList::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // DerivativeSecurityList::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // DerivativeSecurityList::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // DerivativeSecurityList::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // DerivativeSecurityList::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDerivativeSecurityAltID (1218), application, 2 fields, 0 groups, shares static data, hash: 0x239bdf77
   // DerivativeSecurityList::NoDerivativeSecurityAltID
   class NoDerivativeSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1218 };

      NoDerivativeSecurityAltID() : GroupBase(_fnum) {}
      ~NoDerivativeSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeEvents (1286), application, 5 fields, 0 groups, shares static data, hash: 0x5503a1a4
   // DerivativeSecurityList::NoDerivativeEvents
   class NoDerivativeEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1286 };

      NoDerivativeEvents() : GroupBase(_fnum) {}
      ~NoDerivativeEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeInstrumentParties (1292), application, 4 fields, 1 group, shares static data, hash: 0x73c2c1fa
   // DerivativeSecurityList::NoDerivativeInstrumentParties
   class NoDerivativeInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1292 };

      NoDerivativeInstrumentParties() : GroupBase(_fnum) {}
      ~NoDerivativeInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1296, new NoDerivativeInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDerivativeInstrumentPartySubIDs (1296), application, 2 fields, 0 groups, shares static data, hash: 0x23a1a547
      // DerivativeSecurityList::NoDerivativeInstrumentParties::NoDerivativeInstrumentPartySubIDs
      class NoDerivativeInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1296 };

         NoDerivativeInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoDerivativeInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoMarketSegments (1310), application, 21 fields, 5 groups, shares static data, hash: 0x8496fa62
   // DerivativeSecurityList::NoMarketSegments
   class NoMarketSegments : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1310 };

      NoMarketSegments() : GroupBase(_fnum) {}
      ~NoMarketSegments() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 21, &_ftha));
         mb->get_groups().insert({
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // DerivativeSecurityList::NoMarketSegments::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // DerivativeSecurityList::NoMarketSegments::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // DerivativeSecurityList::NoMarketSegments::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // DerivativeSecurityList::NoMarketSegments::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // DerivativeSecurityList::NoMarketSegments::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // DerivativeSecurityList::NoMarketSegments::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDerivativeInstrAttrib (1311), application, 2 fields, 0 groups, shares static data, hash: 0x23a7a34b
   // DerivativeSecurityList::NoDerivativeInstrAttrib
   class NoDerivativeInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1311 };

      NoDerivativeInstrAttrib() : GroupBase(_fnum) {}
      ~NoDerivativeInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderMultileg (AB), application, 216 fields, 10 groups.
class NewOrderMultileg : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NewOrderMultileg() : Message(ctx(), _msgtype(), _traits, 216, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~NewOrderMultileg() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0xe2c9c56d
   // NewOrderMultileg::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({948, new NoNested3PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested3PartyIDs (948), application, 4 fields, 1 group, shares static data, hash: 0x1dc2d820
      // NewOrderMultileg::NoAllocs::NoNested3PartyIDs
      class NoNested3PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 948 };

         NoNested3PartyIDs() : GroupBase(_fnum) {}
         ~NoNested3PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({952, new NoNested3PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested3PartySubIDs (952), application, 2 fields, 0 groups, shares static data, hash: 0x237471ed
         // NewOrderMultileg::NoAllocs::NoNested3PartyIDs::NoNested3PartySubIDs
         class NoNested3PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 952 };

            NoNested3PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested3PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderMultileg::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // NewOrderMultileg::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // NewOrderMultileg::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderMultileg::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 71 fields, 4 groups, shares static data, hash: 0x801ae0ec
   // NewOrderMultileg::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 71, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 670, new NoLegAllocs },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // NewOrderMultileg::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // NewOrderMultileg::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // NewOrderMultileg::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegAllocs (670), application, 6 fields, 1 group, shares static data, hash: 0xf1bdc63a
      // NewOrderMultileg::NoLegs::NoLegAllocs
      class NoLegAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 670 };

         NoLegAllocs() : GroupBase(_fnum) {}
         ~NoLegAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // NewOrderMultileg::NoLegs::NoLegAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // NewOrderMultileg::NoLegs::NoLegAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // NewOrderMultileg::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // NewOrderMultileg::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderMultileg::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderMultileg::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // NewOrderMultileg::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // NewOrderMultileg::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // NewOrderMultileg::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // NewOrderMultileg::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // NewOrderMultileg::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // NewOrderMultileg::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // NewOrderMultileg::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // NewOrderMultileg::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // NewOrderMultileg::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MultilegOrderCancelReplace (AC), application, 217 fields, 10 groups.
class MultilegOrderCancelReplace : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MultilegOrderCancelReplace() : Message(ctx(), _msgtype(), _traits, 217, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~MultilegOrderCancelReplace() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0xe2c9c56d
   // MultilegOrderCancelReplace::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({948, new NoNested3PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested3PartyIDs (948), application, 4 fields, 1 group, shares static data, hash: 0x1dc2d820
      // MultilegOrderCancelReplace::NoAllocs::NoNested3PartyIDs
      class NoNested3PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 948 };

         NoNested3PartyIDs() : GroupBase(_fnum) {}
         ~NoNested3PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({952, new NoNested3PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested3PartySubIDs (952), application, 2 fields, 0 groups, shares static data, hash: 0x237471ed
         // MultilegOrderCancelReplace::NoAllocs::NoNested3PartyIDs::NoNested3PartySubIDs
         class NoNested3PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 952 };

            NoNested3PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested3PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // MultilegOrderCancelReplace::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MultilegOrderCancelReplace::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MultilegOrderCancelReplace::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // MultilegOrderCancelReplace::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 71 fields, 4 groups, shares static data, hash: 0x801ae0ec
   // MultilegOrderCancelReplace::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 71, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 670, new NoLegAllocs },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // MultilegOrderCancelReplace::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // MultilegOrderCancelReplace::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // MultilegOrderCancelReplace::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegAllocs (670), application, 6 fields, 1 group, shares static data, hash: 0xf1bdc63a
      // MultilegOrderCancelReplace::NoLegs::NoLegAllocs
      class NoLegAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 670 };

         NoLegAllocs() : GroupBase(_fnum) {}
         ~NoLegAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // MultilegOrderCancelReplace::NoLegs::NoLegAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // MultilegOrderCancelReplace::NoLegs::NoLegAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // MultilegOrderCancelReplace::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // MultilegOrderCancelReplace::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MultilegOrderCancelReplace::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MultilegOrderCancelReplace::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // MultilegOrderCancelReplace::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // MultilegOrderCancelReplace::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // MultilegOrderCancelReplace::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // MultilegOrderCancelReplace::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // MultilegOrderCancelReplace::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // MultilegOrderCancelReplace::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // MultilegOrderCancelReplace::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // MultilegOrderCancelReplace::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // MultilegOrderCancelReplace::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportRequest (AD), application, 139 fields, 9 groups.
class TradeCaptureReportRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradeCaptureReportRequest() : Message(ctx(), _msgtype(), _traits, 139, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 580, new NoDates },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~TradeCaptureReportRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // TradeCaptureReportRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // TradeCaptureReportRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // TradeCaptureReportRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDates (580), application, 3 fields, 0 groups, is unique, hash: 0x5f6aa9a4
   // TradeCaptureReportRequest::NoDates
   class NoDates : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 580 };

      NoDates() : GroupBase(_fnum) {}
      ~NoDates() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // TradeCaptureReportRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReportRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReportRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // TradeCaptureReportRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // TradeCaptureReportRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // TradeCaptureReportRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // TradeCaptureReportRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // TradeCaptureReportRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // TradeCaptureReportRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // TradeCaptureReportRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // TradeCaptureReportRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // TradeCaptureReportRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReport (AE), application, 203 fields, 11 groups.
class TradeCaptureReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradeCaptureReport() : Message(ctx(), _msgtype(), _traits, 203, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 552, new NoSides },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1116, new NoRootPartyIDs },
         { 1387, new NoTrdRepIndicators },
         { 1483, new NoComplexEvents },
      });
   }
   ~TradeCaptureReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 104 fields, 8 groups, is unique, hash: 0xdd2fb4eb
   // TradeCaptureReport::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 104, &_ftha));
         mb->get_groups().insert({
            { 78, new NoAllocs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 518, new NoContAmts },
            { 576, new NoClearingInstructions },
            { 1016, new NoSideTrdRegTS },
            { 1158, new NoSettlDetails },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoAllocs (78), application, 10 fields, 1 group, shares static data, hash: 0xe18009de
      // TradeCaptureReport::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 10, &_ftha));
            mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // TradeCaptureReport::NoSides::NoAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // TradeCaptureReport::NoSides::NoAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // TradeCaptureReport::NoSides::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // TradeCaptureReport::NoSides::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // TradeCaptureReport::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // TradeCaptureReport::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoContAmts (518), application, 3 fields, 0 groups, shares static data, hash: 0xb32a7415
      // TradeCaptureReport::NoSides::NoContAmts
      class NoContAmts : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 518 };

         NoContAmts() : GroupBase(_fnum) {}
         ~NoContAmts() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // TradeCaptureReport::NoSides::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSideTrdRegTS (1016), application, 3 fields, 0 groups, shares static data, hash: 0x7f123e3c
      // TradeCaptureReport::NoSides::NoSideTrdRegTS
      class NoSideTrdRegTS : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1016 };

         NoSideTrdRegTS() : GroupBase(_fnum) {}
         ~NoSideTrdRegTS() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSettlDetails (1158), application, 2 fields, 1 group, shares static data, hash: 0x13e099a5
      // TradeCaptureReport::NoSides::NoSettlDetails
      class NoSettlDetails : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1158 };

         NoSettlDetails() : GroupBase(_fnum) {}
         ~NoSettlDetails() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // TradeCaptureReport::NoSides::NoSettlDetails::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // TradeCaptureReport::NoSides::NoSettlDetails::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoLegs (555), application, 76 fields, 4 groups, shares static data, hash: 0x2dd89c50
   // TradeCaptureReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 76, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
            { 1342, new NoOfLegUnderlyings },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // TradeCaptureReport::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // TradeCaptureReport::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // TradeCaptureReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoOfLegUnderlyings (1342), application, 16 fields, 1 group, shares static data, hash: 0x963ffc1e
      // TradeCaptureReport::NoLegs::NoOfLegUnderlyings
      class NoOfLegUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1342 };

         NoOfLegUnderlyings() : GroupBase(_fnum) {}
         ~NoOfLegUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 16, &_ftha));
            mb->get_groups().insert({1334, new NoUnderlyingLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingLegSecurityAltID (1334), application, 2 fields, 0 groups, shares static data, hash: 0x23a56182
         // TradeCaptureReport::NoLegs::NoOfLegUnderlyings::NoUnderlyingLegSecurityAltID
         class NoUnderlyingLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1334 };

            NoUnderlyingLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // TradeCaptureReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // TradeCaptureReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // TradeCaptureReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // TradeCaptureReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // TradeCaptureReport::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // TradeCaptureReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // TradeCaptureReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // TradeCaptureReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // TradeCaptureReport::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // TradeCaptureReport::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRepIndicators (1387), application, 2 fields, 0 groups, shares static data, hash: 0x23ae0afa
   // TradeCaptureReport::NoTrdRepIndicators
   class NoTrdRepIndicators : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1387 };

      NoTrdRepIndicators() : GroupBase(_fnum) {}
      ~NoTrdRepIndicators() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // TradeCaptureReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // TradeCaptureReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // TradeCaptureReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassStatusRequest (AF), application, 169 fields, 9 groups.
class OrderMassStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderMassStatusRequest() : Message(ctx(), _msgtype(), _traits, 169, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 457, new NoUnderlyingSecurityAltID },
         { 864, new NoEvents },
         { 887, new NoUnderlyingStips },
         { 1018, new NoInstrumentParties },
         { 1058, new NoUndlyInstrumentParties },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderMassStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassStatusRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderMassStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassStatusRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderMassStatusRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderMassStatusRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // OrderMassStatusRequest::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // OrderMassStatusRequest::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // OrderMassStatusRequest::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderMassStatusRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderMassStatusRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderMassStatusRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteRequestReject (AG), application, 11 fields, 2 groups.
class QuoteRequestReject : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteRequestReject() : Message(ctx(), _msgtype(), _traits, 11, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 1116, new NoRootPartyIDs },
      });
   }
   ~QuoteRequestReject() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 144 fields, 9 groups, is unique, hash: 0x298c1014
   // QuoteRequestReject::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 144, &_ftha));
         mb->get_groups().insert({
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 735, new NoQuoteQualifiers },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // QuoteRequestReject::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // QuoteRequestReject::NoRelatedSym::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // QuoteRequestReject::NoRelatedSym::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteRequestReject::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 67 fields, 3 groups, shares static data, hash: 0x3cf045a4
      // QuoteRequestReject::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 67, &_ftha));
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // QuoteRequestReject::NoRelatedSym::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // QuoteRequestReject::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
      // QuoteRequestReject::NoRelatedSym::NoQuoteQualifiers
      class NoQuoteQualifiers : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 735 };

         NoQuoteQualifiers() : GroupBase(_fnum) {}
         ~NoQuoteQualifiers() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // QuoteRequestReject::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // QuoteRequestReject::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // QuoteRequestReject::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // QuoteRequestReject::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // QuoteRequestReject::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // QuoteRequestReject::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // QuoteRequestReject::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // QuoteRequestReject::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RFQRequest (AH), application, 5 fields, 2 groups.
class RFQRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   RFQRequest() : Message(ctx(), _msgtype(), _traits, 5, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 453, new NoPartyIDs },
      });
   }
   ~RFQRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 95 fields, 6 groups, is unique, hash: 0x6ef91f9b
   // RFQRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 95, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // RFQRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // RFQRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // RFQRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // RFQRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // RFQRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // RFQRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // RFQRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // RFQRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // RFQRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // RFQRequest::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // RFQRequest::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // RFQRequest::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // RFQRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // RFQRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RFQRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RFQRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteStatusReport (AI), application, 181 fields, 10 groups.
class QuoteStatusReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteStatusReport() : Message(ctx(), _msgtype(), _traits, 181, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 735, new NoQuoteQualifiers },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~QuoteStatusReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // QuoteStatusReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteStatusReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteStatusReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteStatusReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 61 fields, 3 groups, is unique, hash: 0x4d20d043
   // QuoteStatusReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 61, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // QuoteStatusReport::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // QuoteStatusReport::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteStatusReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // QuoteStatusReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // QuoteStatusReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteStatusReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteStatusReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // QuoteStatusReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // QuoteStatusReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // QuoteStatusReport::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // QuoteStatusReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // QuoteStatusReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // QuoteStatusReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // QuoteStatusReport::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // QuoteStatusReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // QuoteStatusReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // QuoteStatusReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteResponse (AJ), application, 177 fields, 9 groups.
class QuoteResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteResponse() : Message(ctx(), _msgtype(), _traits, 177, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 735, new NoQuoteQualifiers },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~QuoteResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // QuoteResponse::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteResponse::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 72 fields, 3 groups, shares static data, hash: 0x8277854f
   // QuoteResponse::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // QuoteResponse::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // QuoteResponse::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteResponse::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // QuoteResponse::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // QuoteResponse::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteResponse::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteResponse::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // QuoteResponse::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // QuoteResponse::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // QuoteResponse::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // QuoteResponse::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // QuoteResponse::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // QuoteResponse::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // QuoteResponse::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // QuoteResponse::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // QuoteResponse::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Confirmation (AK), application, 181 fields, 14 groups.
class Confirmation : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Confirmation() : Message(ctx(), _msgtype(), _traits, 181, &_ftha)
   {
      _groups.insert({
         { 73, new NoOrders },
         { 85, new NoDlvyInst },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 862, new NoCapacities },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~Confirmation() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // Confirmation::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha));
         mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // Confirmation::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // Confirmation::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // Confirmation::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
         mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // Confirmation::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // Confirmation::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // Confirmation::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // Confirmation::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // Confirmation::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // Confirmation::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Confirmation::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // Confirmation::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Confirmation::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // Confirmation::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Confirmation::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Confirmation::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // Confirmation::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // Confirmation::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // Confirmation::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCapacities (862), application, 3 fields, 0 groups, is unique, hash: 0xef291272
   // Confirmation::NoCapacities
   class NoCapacities : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 862 };

      NoCapacities() : GroupBase(_fnum) {}
      ~NoCapacities() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // Confirmation::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // Confirmation::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // Confirmation::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // Confirmation::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // Confirmation::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // Confirmation::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // Confirmation::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionMaintenanceRequest (AL), application, 115 fields, 10 groups.
class PositionMaintenanceRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   PositionMaintenanceRequest() : Message(ctx(), _msgtype(), _traits, 115, &_ftha)
   {
      _groups.insert({
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 702, new NoPositions },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~PositionMaintenanceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // PositionMaintenanceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionMaintenanceRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionMaintenanceRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionMaintenanceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // PositionMaintenanceRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionMaintenanceRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 6 fields, 1 group, shares static data, hash: 0xbcf8d527
   // PositionMaintenanceRequest::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionMaintenanceRequest::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionMaintenanceRequest::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // PositionMaintenanceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionMaintenanceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionMaintenanceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // PositionMaintenanceRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // PositionMaintenanceRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // PositionMaintenanceRequest::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // PositionMaintenanceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // PositionMaintenanceRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // PositionMaintenanceRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // PositionMaintenanceRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // PositionMaintenanceRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // PositionMaintenanceRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionMaintenanceReport (AM), application, 118 fields, 10 groups.
class PositionMaintenanceReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   PositionMaintenanceReport() : Message(ctx(), _msgtype(), _traits, 118, &_ftha)
   {
      _groups.insert({
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 702, new NoPositions },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~PositionMaintenanceReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // PositionMaintenanceReport::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionMaintenanceReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionMaintenanceReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionMaintenanceReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // PositionMaintenanceReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionMaintenanceReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 6 fields, 1 group, shares static data, hash: 0xbcf8d527
   // PositionMaintenanceReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionMaintenanceReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionMaintenanceReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // PositionMaintenanceReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionMaintenanceReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionMaintenanceReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // PositionMaintenanceReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // PositionMaintenanceReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // PositionMaintenanceReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // PositionMaintenanceReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // PositionMaintenanceReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // PositionMaintenanceReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // PositionMaintenanceReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // PositionMaintenanceReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // PositionMaintenanceReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RequestForPositions (AN), application, 110 fields, 8 groups.
class RequestForPositions : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   RequestForPositions() : Message(ctx(), _msgtype(), _traits, 110, &_ftha)
   {
      _groups.insert({
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~RequestForPositions() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // RequestForPositions::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RequestForPositions::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RequestForPositions::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // RequestForPositions::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // RequestForPositions::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // RequestForPositions::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // RequestForPositions::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // RequestForPositions::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // RequestForPositions::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // RequestForPositions::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // RequestForPositions::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // RequestForPositions::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // RequestForPositions::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // RequestForPositions::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // RequestForPositions::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // RequestForPositions::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // RequestForPositions::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RequestForPositionsAck (AO), application, 113 fields, 7 groups.
class RequestForPositionsAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   RequestForPositionsAck() : Message(ctx(), _msgtype(), _traits, 113, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~RequestForPositionsAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RequestForPositionsAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RequestForPositionsAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // RequestForPositionsAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // RequestForPositionsAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // RequestForPositionsAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // RequestForPositionsAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // RequestForPositionsAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // RequestForPositionsAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // RequestForPositionsAck::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // RequestForPositionsAck::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // RequestForPositionsAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // RequestForPositionsAck::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // RequestForPositionsAck::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // RequestForPositionsAck::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // RequestForPositionsAck::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // RequestForPositionsAck::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionReport (AP), application, 125 fields, 9 groups.
class PositionReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   PositionReport() : Message(ctx(), _msgtype(), _traits, 125, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 702, new NoPositions },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~PositionReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // PositionReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 6 fields, 1 group, shares static data, hash: 0xbcf8d527
   // PositionReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 76 fields, 4 groups, is unique, hash: 0x8dd4fd8a
   // PositionReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 76, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 984, new NoUnderlyingAmounts },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingAmounts (984), application, 4 fields, 0 groups, is unique, hash: 0xf7c01b93
      // PositionReport::NoUnderlyings::NoUnderlyingAmounts
      class NoUnderlyingAmounts : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 984 };

         NoUnderlyingAmounts() : GroupBase(_fnum) {}
         ~NoUnderlyingAmounts() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // PositionReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // PositionReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // PositionReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // PositionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // PositionReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // PositionReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // PositionReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // PositionReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // PositionReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportRequestAck (AQ), application, 107 fields, 6 groups.
class TradeCaptureReportRequestAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradeCaptureReportRequestAck() : Message(ctx(), _msgtype(), _traits, 107, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~TradeCaptureReportRequestAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportRequestAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // TradeCaptureReportRequestAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportRequestAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // TradeCaptureReportRequestAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReportRequestAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReportRequestAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // TradeCaptureReportRequestAck::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // TradeCaptureReportRequestAck::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // TradeCaptureReportRequestAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // TradeCaptureReportRequestAck::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // TradeCaptureReportRequestAck::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // TradeCaptureReportRequestAck::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // TradeCaptureReportRequestAck::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // TradeCaptureReportRequestAck::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportAck (AR), application, 172 fields, 11 groups.
class TradeCaptureReportAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradeCaptureReportAck() : Message(ctx(), _msgtype(), _traits, 172, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 552, new NoSides },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1116, new NoRootPartyIDs },
         { 1387, new NoTrdRepIndicators },
         { 1483, new NoComplexEvents },
      });
   }
   ~TradeCaptureReportAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 99 fields, 8 groups, is unique, hash: 0xfd7256f1
   // TradeCaptureReportAck::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 99, &_ftha));
         mb->get_groups().insert({
            { 78, new NoAllocs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 518, new NoContAmts },
            { 576, new NoClearingInstructions },
            { 1016, new NoSideTrdRegTS },
            { 1158, new NoSettlDetails },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoAllocs (78), application, 10 fields, 1 group, shares static data, hash: 0xe18009de
      // TradeCaptureReportAck::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 10, &_ftha));
            mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // TradeCaptureReportAck::NoSides::NoAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // TradeCaptureReportAck::NoSides::NoAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // TradeCaptureReportAck::NoSides::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // TradeCaptureReportAck::NoSides::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // TradeCaptureReportAck::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // TradeCaptureReportAck::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoContAmts (518), application, 3 fields, 0 groups, shares static data, hash: 0xb32a7415
      // TradeCaptureReportAck::NoSides::NoContAmts
      class NoContAmts : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 518 };

         NoContAmts() : GroupBase(_fnum) {}
         ~NoContAmts() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // TradeCaptureReportAck::NoSides::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSideTrdRegTS (1016), application, 3 fields, 0 groups, shares static data, hash: 0x7f123e3c
      // TradeCaptureReportAck::NoSides::NoSideTrdRegTS
      class NoSideTrdRegTS : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1016 };

         NoSideTrdRegTS() : GroupBase(_fnum) {}
         ~NoSideTrdRegTS() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSettlDetails (1158), application, 2 fields, 1 group, shares static data, hash: 0x13e099a5
      // TradeCaptureReportAck::NoSides::NoSettlDetails
      class NoSettlDetails : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1158 };

         NoSettlDetails() : GroupBase(_fnum) {}
         ~NoSettlDetails() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // TradeCaptureReportAck::NoSides::NoSettlDetails::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // TradeCaptureReportAck::NoSides::NoSettlDetails::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoLegs (555), application, 76 fields, 4 groups, shares static data, hash: 0x2dd89c50
   // TradeCaptureReportAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 76, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
            { 1342, new NoOfLegUnderlyings },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // TradeCaptureReportAck::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // TradeCaptureReportAck::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // TradeCaptureReportAck::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoOfLegUnderlyings (1342), application, 16 fields, 1 group, shares static data, hash: 0x963ffc1e
      // TradeCaptureReportAck::NoLegs::NoOfLegUnderlyings
      class NoOfLegUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1342 };

         NoOfLegUnderlyings() : GroupBase(_fnum) {}
         ~NoOfLegUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 16, &_ftha));
            mb->get_groups().insert({1334, new NoUnderlyingLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingLegSecurityAltID (1334), application, 2 fields, 0 groups, shares static data, hash: 0x23a56182
         // TradeCaptureReportAck::NoLegs::NoOfLegUnderlyings::NoUnderlyingLegSecurityAltID
         class NoUnderlyingLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1334 };

            NoUnderlyingLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // TradeCaptureReportAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReportAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReportAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // TradeCaptureReportAck::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // TradeCaptureReportAck::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // TradeCaptureReportAck::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // TradeCaptureReportAck::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // TradeCaptureReportAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // TradeCaptureReportAck::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // TradeCaptureReportAck::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // TradeCaptureReportAck::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // TradeCaptureReportAck::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRepIndicators (1387), application, 2 fields, 0 groups, shares static data, hash: 0x23ae0afa
   // TradeCaptureReportAck::NoTrdRepIndicators
   class NoTrdRepIndicators : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1387 };

      NoTrdRepIndicators() : GroupBase(_fnum) {}
      ~NoTrdRepIndicators() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // TradeCaptureReportAck::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // TradeCaptureReportAck::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // TradeCaptureReportAck::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationReport (AS), application, 188 fields, 14 groups.
class AllocationReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AllocationReport() : Message(ctx(), _msgtype(), _traits, 188, &_ftha)
   {
      _groups.insert({
         { 73, new NoOrders },
         { 78, new NoAllocs },
         { 124, new NoExecs },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1445, new NoRateSources },
         { 1483, new NoComplexEvents },
      });
   }
   ~AllocationReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // AllocationReport::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha));
         mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // AllocationReport::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // AllocationReport::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoAllocs (78), application, 41 fields, 4 groups, shares static data, hash: 0x9f17fe98
   // AllocationReport::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 41, &_ftha));
         mb->get_groups().insert({
            { 85, new NoDlvyInst },
            { 136, new NoMiscFees },
            { 539, new NoNestedPartyIDs },
            { 576, new NoClearingInstructions },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // AllocationReport::NoAllocs::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // AllocationReport::NoAllocs::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // AllocationReport::NoAllocs::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // AllocationReport::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationReport::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationReport::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // AllocationReport::NoAllocs::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 8 fields, 0 groups, shares static data, hash: 0x911017bd
   // AllocationReport::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // AllocationReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AllocationReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // AllocationReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AllocationReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // AllocationReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AllocationReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AllocationReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // AllocationReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // AllocationReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // AllocationReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // AllocationReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // AllocationReport::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // AllocationReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // AllocationReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
   // AllocationReport::NoRateSources
   class NoRateSources : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1445 };

      NoRateSources() : GroupBase(_fnum) {}
      ~NoRateSources() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // AllocationReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // AllocationReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // AllocationReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationReportAck (AT), application, 21 fields, 2 groups.
class AllocationReportAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AllocationReportAck() : Message(ctx(), _msgtype(), _traits, 21, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 453, new NoPartyIDs },
      });
   }
   ~AllocationReportAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 14 fields, 1 group, shares static data, hash: 0x9f5ae183
   // AllocationReportAck::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 14, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationReportAck::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationReportAck::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationReportAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationReportAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ConfirmationAck (AU), application, 9 fields, 0 groups.
class ConfirmationAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ConfirmationAck() : Message(ctx(), _msgtype(), _traits, 9, &_ftha) {}
   ~ConfirmationAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SettlementInstructionRequest (AV), application, 16 fields, 1 group.
class SettlementInstructionRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SettlementInstructionRequest() : Message(ctx(), _msgtype(), _traits, 16, &_ftha)
   {
      _groups.insert({453, new NoPartyIDs });
   }
   ~SettlementInstructionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // SettlementInstructionRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // SettlementInstructionRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AssignmentReport (AW), application, 120 fields, 9 groups.
class AssignmentReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AssignmentReport() : Message(ctx(), _msgtype(), _traits, 120, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 702, new NoPositions },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~AssignmentReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AssignmentReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AssignmentReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AssignmentReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // AssignmentReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AssignmentReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 6 fields, 1 group, shares static data, hash: 0xbcf8d527
   // AssignmentReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AssignmentReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AssignmentReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // AssignmentReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AssignmentReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AssignmentReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // AssignmentReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // AssignmentReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // AssignmentReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // AssignmentReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // AssignmentReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // AssignmentReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // AssignmentReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // AssignmentReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // AssignmentReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralRequest (AX), application, 145 fields, 12 groups.
class CollateralRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralRequest() : Message(ctx(), _msgtype(), _traits, 145, &_ftha)
   {
      _groups.insert({
         { 124, new NoExecs },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralRequest::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralRequest::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralRequest::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 73 fields, 3 groups, shares static data, hash: 0xd2e91cf5
   // CollateralRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 73, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // CollateralRequest::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralRequest::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralAssignment (AY), application, 153 fields, 13 groups.
class CollateralAssignment : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralAssignment() : Message(ctx(), _msgtype(), _traits, 153, &_ftha)
   {
      _groups.insert({
         { 85, new NoDlvyInst },
         { 124, new NoExecs },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralAssignment() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralAssignment::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
         mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralAssignment::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralAssignment::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralAssignment::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralAssignment::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralAssignment::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralAssignment::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralAssignment::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralAssignment::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralAssignment::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralAssignment::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 73 fields, 3 groups, shares static data, hash: 0xd2e91cf5
   // CollateralAssignment::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 73, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralAssignment::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralAssignment::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralAssignment::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralAssignment::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // CollateralAssignment::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralAssignment::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralAssignment::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralAssignment::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralAssignment::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralAssignment::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralAssignment::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralAssignment::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralResponse (AZ), application, 147 fields, 12 groups.
class CollateralResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralResponse() : Message(ctx(), _msgtype(), _traits, 147, &_ftha)
   {
      _groups.insert({
         { 124, new NoExecs },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralResponse::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralResponse::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralResponse::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralResponse::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralResponse::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralResponse::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 73 fields, 3 groups, shares static data, hash: 0xd2e91cf5
   // CollateralResponse::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 73, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralResponse::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralResponse::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralResponse::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralResponse::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // CollateralResponse::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralResponse::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralResponse::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralResponse::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralResponse::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralResponse::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralResponse::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralResponse::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// News (B), application, 23 fields, 6 groups.
class News : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   News() : Message(ctx(), _msgtype(), _traits, 23, &_ftha)
   {
      _groups.insert({
         { 33, new NoLinesOfText },
         { 146, new NoRelatedSym },
         { 215, new NoRoutingIDs },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 1475, new NoNewsRefIDs },
      });
   }
   ~News() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoLinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // News::NoLinesOfText
   class NoLinesOfText : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 33 };

      NoLinesOfText() : GroupBase(_fnum) {}
      ~NoLinesOfText() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 88 fields, 4 groups, shares static data, hash: 0xdfc162b5
   // News::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 88, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // News::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // News::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // News::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // News::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // News::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // News::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // News::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // News::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // News::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // News::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // News::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // News::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // News::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // News::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // News::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoNewsRefIDs (1475), application, 2 fields, 0 groups, is unique, hash: 0x23bb1fd0
   // News::NoNewsRefIDs
   class NoNewsRefIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1475 };

      NoNewsRefIDs() : GroupBase(_fnum) {}
      ~NoNewsRefIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralReport (BA), application, 154 fields, 13 groups.
class CollateralReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralReport() : Message(ctx(), _msgtype(), _traits, 154, &_ftha)
   {
      _groups.insert({
         { 85, new NoDlvyInst },
         { 124, new NoExecs },
         { 136, new NoMiscFees },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralReport::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
         mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralReport::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralReport::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralReport::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralReport::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // CollateralReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // CollateralReport::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralReport::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralInquiry (BB), application, 150 fields, 13 groups.
class CollateralInquiry : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralInquiry() : Message(ctx(), _msgtype(), _traits, 150, &_ftha)
   {
      _groups.insert({
         { 85, new NoDlvyInst },
         { 124, new NoExecs },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 938, new NoCollInquiryQualifier },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralInquiry() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralInquiry::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
         mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralInquiry::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralInquiry::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralInquiry::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralInquiry::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralInquiry::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralInquiry::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralInquiry::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralInquiry::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralInquiry::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // CollateralInquiry::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralInquiry::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralInquiry::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralInquiry::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralInquiry::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // CollateralInquiry::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralInquiry::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralInquiry::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCollInquiryQualifier (938), application, 1 field, 0 groups, shares static data, hash: 0x80001b81
   // CollateralInquiry::NoCollInquiryQualifier
   class NoCollInquiryQualifier : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 938 };

      NoCollInquiryQualifier() : GroupBase(_fnum) {}
      ~NoCollInquiryQualifier() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralInquiry::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralInquiry::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralInquiry::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralInquiry::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralInquiry::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// NetworkCounterpartySystemStatusRequest (BC), application, 3 fields, 1 group.
class NetworkCounterpartySystemStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NetworkCounterpartySystemStatusRequest() : Message(ctx(), _msgtype(), _traits, 3, &_ftha)
   {
      _groups.insert({936, new NoCompIDs });
   }
   ~NetworkCounterpartySystemStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoCompIDs (936), application, 4 fields, 0 groups, is unique, hash: 0x87f17dd0
   // NetworkCounterpartySystemStatusRequest::NoCompIDs
   class NoCompIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 936 };

      NoCompIDs() : GroupBase(_fnum) {}
      ~NoCompIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NetworkCounterpartySystemStatusResponse (BD), application, 5 fields, 1 group.
class NetworkCounterpartySystemStatusResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NetworkCounterpartySystemStatusResponse() : Message(ctx(), _msgtype(), _traits, 5, &_ftha)
   {
      _groups.insert({936, new NoCompIDs });
   }
   ~NetworkCounterpartySystemStatusResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoCompIDs (936), application, 6 fields, 0 groups, is unique, hash: 0xa80f7cc0
   // NetworkCounterpartySystemStatusResponse::NoCompIDs
   class NoCompIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 936 };

      NoCompIDs() : GroupBase(_fnum) {}
      ~NoCompIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// UserRequest (BE), application, 12 fields, 0 groups.
class UserRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   UserRequest() : Message(ctx(), _msgtype(), _traits, 12, &_ftha) {}
   ~UserRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// UserResponse (BF), application, 4 fields, 0 groups.
class UserResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   UserResponse() : Message(ctx(), _msgtype(), _traits, 4, &_ftha) {}
   ~UserResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// CollateralInquiryAck (BG), application, 127 fields, 10 groups.
class CollateralInquiryAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CollateralInquiryAck() : Message(ctx(), _msgtype(), _traits, 127, &_ftha)
   {
      _groups.insert({
         { 124, new NoExecs },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 897, new NoTrades },
         { 938, new NoCollInquiryQualifier },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~CollateralInquiryAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralInquiryAck::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralInquiryAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralInquiryAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralInquiryAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CollateralInquiryAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralInquiryAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // CollateralInquiryAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralInquiryAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralInquiryAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CollateralInquiryAck::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CollateralInquiryAck::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CollateralInquiryAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralInquiryAck::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCollInquiryQualifier (938), application, 1 field, 0 groups, shares static data, hash: 0x80001b81
   // CollateralInquiryAck::NoCollInquiryQualifier
   class NoCollInquiryQualifier : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 938 };

      NoCollInquiryQualifier() : GroupBase(_fnum) {}
      ~NoCollInquiryQualifier() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CollateralInquiryAck::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CollateralInquiryAck::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CollateralInquiryAck::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CollateralInquiryAck::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CollateralInquiryAck::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ConfirmationRequest (BH), application, 13 fields, 1 group.
class ConfirmationRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ConfirmationRequest() : Message(ctx(), _msgtype(), _traits, 13, &_ftha)
   {
      _groups.insert({73, new NoOrders });
   }
   ~ConfirmationRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // ConfirmationRequest::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha));
         mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // ConfirmationRequest::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // ConfirmationRequest::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionListRequest (BI), application, 9 fields, 0 groups.
class TradingSessionListRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradingSessionListRequest() : Message(ctx(), _msgtype(), _traits, 9, &_ftha) {}
   ~TradingSessionListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionList (BJ), application, 6 fields, 1 group.
class TradingSessionList : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradingSessionList() : Message(ctx(), _msgtype(), _traits, 6, &_ftha)
   {
      _groups.insert({386, new NoTradingSessions });
   }
   ~TradingSessionList() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTradingSessions (386), application, 27 fields, 5 groups, shares static data, hash: 0xc784f198
   // TradingSessionList::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 27, &_ftha));
         mb->get_groups().insert({
            { 1141, new NoMDFeedTypes },
            { 1232, new NoExecInstRules },
            { 1235, new NoMatchRules },
            { 1237, new NoOrdTypeRules },
            { 1239, new NoTimeInForceRules },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
      // TradingSessionList::NoTradingSessions::NoMDFeedTypes
      class NoMDFeedTypes : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1141 };

         NoMDFeedTypes() : GroupBase(_fnum) {}
         ~NoMDFeedTypes() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
      // TradingSessionList::NoTradingSessions::NoExecInstRules
      class NoExecInstRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1232 };

         NoExecInstRules() : GroupBase(_fnum) {}
         ~NoExecInstRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
      // TradingSessionList::NoTradingSessions::NoMatchRules
      class NoMatchRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1235 };

         NoMatchRules() : GroupBase(_fnum) {}
         ~NoMatchRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
      // TradingSessionList::NoTradingSessions::NoOrdTypeRules
      class NoOrdTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1237 };

         NoOrdTypeRules() : GroupBase(_fnum) {}
         ~NoOrdTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
      // TradingSessionList::NoTradingSessions::NoTimeInForceRules
      class NoTimeInForceRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1239 };

         NoTimeInForceRules() : GroupBase(_fnum) {}
         ~NoTimeInForceRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityListUpdateReport (BK), application, 24 fields, 1 group.
class SecurityListUpdateReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityListUpdateReport() : Message(ctx(), _msgtype(), _traits, 24, &_ftha)
   {
      _groups.insert({146, new NoRelatedSym });
   }
   ~SecurityListUpdateReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 142 fields, 13 groups, is unique, hash: 0x6b593e0b
   // SecurityListUpdateReport::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 142, &_ftha));
         mb->get_groups().insert({
            { 232, new NoStipulations },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
            { 1018, new NoInstrumentParties },
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // SecurityListUpdateReport::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // SecurityListUpdateReport::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 62 fields, 2 groups, shares static data, hash: 0x604fb052
      // SecurityListUpdateReport::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 62, &_ftha));
            mb->get_groups().insert({
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // SecurityListUpdateReport::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // SecurityListUpdateReport::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // SecurityListUpdateReport::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // SecurityListUpdateReport::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // SecurityListUpdateReport::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // SecurityListUpdateReport::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // SecurityListUpdateReport::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // SecurityListUpdateReport::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // SecurityListUpdateReport::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // SecurityListUpdateReport::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // SecurityListUpdateReport::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // SecurityListUpdateReport::NoRelatedSym::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // SecurityListUpdateReport::NoRelatedSym::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // SecurityListUpdateReport::NoRelatedSym::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // SecurityListUpdateReport::NoRelatedSym::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // SecurityListUpdateReport::NoRelatedSym::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // SecurityListUpdateReport::NoRelatedSym::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // SecurityListUpdateReport::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // SecurityListUpdateReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // SecurityListUpdateReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AdjustedPositionReport (BL), application, 10 fields, 3 groups.
class AdjustedPositionReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AdjustedPositionReport() : Message(ctx(), _msgtype(), _traits, 10, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 453, new NoPartyIDs },
         { 702, new NoPositions },
      });
   }
   ~AdjustedPositionReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 88 fields, 4 groups, shares static data, hash: 0xdfc162b5
   // AdjustedPositionReport::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 88, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // AdjustedPositionReport::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // AdjustedPositionReport::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // AdjustedPositionReport::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // AdjustedPositionReport::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // AdjustedPositionReport::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // AdjustedPositionReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // AdjustedPositionReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AdjustedPositionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AdjustedPositionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 6 fields, 1 group, shares static data, hash: 0xbcf8d527
   // AdjustedPositionReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AdjustedPositionReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AdjustedPositionReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationInstructionAlert (BM), application, 182 fields, 13 groups.
class AllocationInstructionAlert : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AllocationInstructionAlert() : Message(ctx(), _msgtype(), _traits, 182, &_ftha)
   {
      _groups.insert({
         { 73, new NoOrders },
         { 78, new NoAllocs },
         { 124, new NoExecs },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~AllocationInstructionAlert() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // AllocationInstructionAlert::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha));
         mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // AllocationInstructionAlert::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // AllocationInstructionAlert::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoAllocs (78), application, 41 fields, 4 groups, shares static data, hash: 0x9f17fe98
   // AllocationInstructionAlert::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 41, &_ftha));
         mb->get_groups().insert({
            { 85, new NoDlvyInst },
            { 136, new NoMiscFees },
            { 539, new NoNestedPartyIDs },
            { 576, new NoClearingInstructions },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // AllocationInstructionAlert::NoAllocs::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // AllocationInstructionAlert::NoAllocs::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // AllocationInstructionAlert::NoAllocs::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // AllocationInstructionAlert::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationInstructionAlert::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationInstructionAlert::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // AllocationInstructionAlert::NoAllocs::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 8 fields, 0 groups, shares static data, hash: 0x911017bd
   // AllocationInstructionAlert::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // AllocationInstructionAlert::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationInstructionAlert::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationInstructionAlert::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AllocationInstructionAlert::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // AllocationInstructionAlert::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AllocationInstructionAlert::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // AllocationInstructionAlert::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AllocationInstructionAlert::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AllocationInstructionAlert::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // AllocationInstructionAlert::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // AllocationInstructionAlert::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // AllocationInstructionAlert::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // AllocationInstructionAlert::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // AllocationInstructionAlert::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // AllocationInstructionAlert::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // AllocationInstructionAlert::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // AllocationInstructionAlert::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // AllocationInstructionAlert::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // AllocationInstructionAlert::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ExecutionAcknowledgement (BN), application, 111 fields, 6 groups.
class ExecutionAcknowledgement : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ExecutionAcknowledgement() : Message(ctx(), _msgtype(), _traits, 111, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~ExecutionAcknowledgement() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // ExecutionAcknowledgement::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // ExecutionAcknowledgement::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // ExecutionAcknowledgement::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // ExecutionAcknowledgement::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // ExecutionAcknowledgement::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // ExecutionAcknowledgement::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // ExecutionAcknowledgement::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // ExecutionAcknowledgement::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // ExecutionAcknowledgement::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // ExecutionAcknowledgement::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // ExecutionAcknowledgement::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // ExecutionAcknowledgement::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // ExecutionAcknowledgement::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // ExecutionAcknowledgement::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ContraryIntentionReport (BO), application, 103 fields, 7 groups.
class ContraryIntentionReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ContraryIntentionReport() : Message(ctx(), _msgtype(), _traits, 103, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 981, new NoExpiration },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~ContraryIntentionReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ContraryIntentionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ContraryIntentionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // ContraryIntentionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // ContraryIntentionReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // ContraryIntentionReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // ContraryIntentionReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // ContraryIntentionReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // ContraryIntentionReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // ContraryIntentionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoExpiration (981), application, 2 fields, 0 groups, is unique, hash: 0x23799c14
   // ContraryIntentionReport::NoExpiration
   class NoExpiration : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 981 };

      NoExpiration() : GroupBase(_fnum) {}
      ~NoExpiration() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // ContraryIntentionReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // ContraryIntentionReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // ContraryIntentionReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // ContraryIntentionReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // ContraryIntentionReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinitionUpdateReport (BP), application, 125 fields, 9 groups.
class SecurityDefinitionUpdateReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityDefinitionUpdateReport() : Message(ctx(), _msgtype(), _traits, 125, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1310, new NoMarketSegments },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityDefinitionUpdateReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // SecurityDefinitionUpdateReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityDefinitionUpdateReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityDefinitionUpdateReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityDefinitionUpdateReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityDefinitionUpdateReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityDefinitionUpdateReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityDefinitionUpdateReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityDefinitionUpdateReport::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityDefinitionUpdateReport::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityDefinitionUpdateReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityDefinitionUpdateReport::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityDefinitionUpdateReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityDefinitionUpdateReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoMarketSegments (1310), application, 21 fields, 5 groups, shares static data, hash: 0x8496fa62
   // SecurityDefinitionUpdateReport::NoMarketSegments
   class NoMarketSegments : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1310 };

      NoMarketSegments() : GroupBase(_fnum) {}
      ~NoMarketSegments() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 21, &_ftha));
         mb->get_groups().insert({
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // SecurityDefinitionUpdateReport::NoMarketSegments::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // SecurityDefinitionUpdateReport::NoMarketSegments::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // SecurityDefinitionUpdateReport::NoMarketSegments::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // SecurityDefinitionUpdateReport::NoMarketSegments::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // SecurityDefinitionUpdateReport::NoMarketSegments::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityDefinitionUpdateReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityDefinitionUpdateReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityDefinitionUpdateReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SettlementObligationReport (BQ), application, 13 fields, 1 group.
class SettlementObligationReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SettlementObligationReport() : Message(ctx(), _msgtype(), _traits, 13, &_ftha)
   {
      _groups.insert({1165, new NoSettlOblig });
   }
   ~SettlementObligationReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSettlOblig (1165), application, 103 fields, 6 groups, is unique, hash: 0x6da3e04
   // SettlementObligationReport::NoSettlOblig
   class NoSettlOblig : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1165 };

      NoSettlOblig() : GroupBase(_fnum) {}
      ~NoSettlOblig() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 103, &_ftha));
         mb->get_groups().insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1158, new NoSettlDetails },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // SettlementObligationReport::NoSettlOblig::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // SettlementObligationReport::NoSettlOblig::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // SettlementObligationReport::NoSettlOblig::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // SettlementObligationReport::NoSettlOblig::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // SettlementObligationReport::NoSettlOblig::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // SettlementObligationReport::NoSettlOblig::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSettlDetails (1158), application, 2 fields, 1 group, shares static data, hash: 0x13e099a5
      // SettlementObligationReport::NoSettlOblig::NoSettlDetails
      class NoSettlDetails : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1158 };

         NoSettlDetails() : GroupBase(_fnum) {}
         ~NoSettlDetails() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // SettlementObligationReport::NoSettlOblig::NoSettlDetails::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // SettlementObligationReport::NoSettlOblig::NoSettlDetails::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // SettlementObligationReport::NoSettlOblig::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // SettlementObligationReport::NoSettlOblig::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // SettlementObligationReport::NoSettlOblig::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// DerivativeSecurityListUpdateReport (BR), application, 148 fields, 9 groups.
class DerivativeSecurityListUpdateReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   DerivativeSecurityListUpdateReport() : Message(ctx(), _msgtype(), _traits, 148, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 457, new NoUnderlyingSecurityAltID },
         { 887, new NoUnderlyingStips },
         { 1058, new NoUndlyInstrumentParties },
         { 1218, new NoDerivativeSecurityAltID },
         { 1286, new NoDerivativeEvents },
         { 1292, new NoDerivativeInstrumentParties },
         { 1310, new NoMarketSegments },
         { 1311, new NoDerivativeInstrAttrib },
      });
   }
   ~DerivativeSecurityListUpdateReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 103 fields, 6 groups, is unique, hash: 0xe5ad34a9
   // DerivativeSecurityListUpdateReport::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 103, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // DerivativeSecurityListUpdateReport::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // DerivativeSecurityListUpdateReport::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // DerivativeSecurityListUpdateReport::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // DerivativeSecurityListUpdateReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // DerivativeSecurityListUpdateReport::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // DerivativeSecurityListUpdateReport::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // DerivativeSecurityListUpdateReport::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // DerivativeSecurityListUpdateReport::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // DerivativeSecurityListUpdateReport::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDerivativeSecurityAltID (1218), application, 2 fields, 0 groups, shares static data, hash: 0x239bdf77
   // DerivativeSecurityListUpdateReport::NoDerivativeSecurityAltID
   class NoDerivativeSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1218 };

      NoDerivativeSecurityAltID() : GroupBase(_fnum) {}
      ~NoDerivativeSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeEvents (1286), application, 5 fields, 0 groups, shares static data, hash: 0x5503a1a4
   // DerivativeSecurityListUpdateReport::NoDerivativeEvents
   class NoDerivativeEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1286 };

      NoDerivativeEvents() : GroupBase(_fnum) {}
      ~NoDerivativeEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeInstrumentParties (1292), application, 4 fields, 1 group, shares static data, hash: 0x73c2c1fa
   // DerivativeSecurityListUpdateReport::NoDerivativeInstrumentParties
   class NoDerivativeInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1292 };

      NoDerivativeInstrumentParties() : GroupBase(_fnum) {}
      ~NoDerivativeInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1296, new NoDerivativeInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDerivativeInstrumentPartySubIDs (1296), application, 2 fields, 0 groups, shares static data, hash: 0x23a1a547
      // DerivativeSecurityListUpdateReport::NoDerivativeInstrumentParties::NoDerivativeInstrumentPartySubIDs
      class NoDerivativeInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1296 };

         NoDerivativeInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoDerivativeInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoMarketSegments (1310), application, 21 fields, 5 groups, shares static data, hash: 0x8496fa62
   // DerivativeSecurityListUpdateReport::NoMarketSegments
   class NoMarketSegments : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1310 };

      NoMarketSegments() : GroupBase(_fnum) {}
      ~NoMarketSegments() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 21, &_ftha));
         mb->get_groups().insert({
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // DerivativeSecurityListUpdateReport::NoMarketSegments::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // DerivativeSecurityListUpdateReport::NoMarketSegments::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // DerivativeSecurityListUpdateReport::NoMarketSegments::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // DerivativeSecurityListUpdateReport::NoMarketSegments::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDerivativeInstrAttrib (1311), application, 2 fields, 0 groups, shares static data, hash: 0x23a7a34b
   // DerivativeSecurityListUpdateReport::NoDerivativeInstrAttrib
   class NoDerivativeInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1311 };

      NoDerivativeInstrAttrib() : GroupBase(_fnum) {}
      ~NoDerivativeInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionListUpdateReport (BS), application, 6 fields, 1 group.
class TradingSessionListUpdateReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradingSessionListUpdateReport() : Message(ctx(), _msgtype(), _traits, 6, &_ftha)
   {
      _groups.insert({386, new NoTradingSessions });
   }
   ~TradingSessionListUpdateReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTradingSessions (386), application, 27 fields, 5 groups, shares static data, hash: 0xc784f198
   // TradingSessionListUpdateReport::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 27, &_ftha));
         mb->get_groups().insert({
            { 1141, new NoMDFeedTypes },
            { 1232, new NoExecInstRules },
            { 1235, new NoMatchRules },
            { 1237, new NoOrdTypeRules },
            { 1239, new NoTimeInForceRules },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
      // TradingSessionListUpdateReport::NoTradingSessions::NoMDFeedTypes
      class NoMDFeedTypes : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1141 };

         NoMDFeedTypes() : GroupBase(_fnum) {}
         ~NoMDFeedTypes() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
      // TradingSessionListUpdateReport::NoTradingSessions::NoExecInstRules
      class NoExecInstRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1232 };

         NoExecInstRules() : GroupBase(_fnum) {}
         ~NoExecInstRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
      // TradingSessionListUpdateReport::NoTradingSessions::NoMatchRules
      class NoMatchRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1235 };

         NoMatchRules() : GroupBase(_fnum) {}
         ~NoMatchRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
      // TradingSessionListUpdateReport::NoTradingSessions::NoOrdTypeRules
      class NoOrdTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1237 };

         NoOrdTypeRules() : GroupBase(_fnum) {}
         ~NoOrdTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
      // TradingSessionListUpdateReport::NoTradingSessions::NoTimeInForceRules
      class NoTimeInForceRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1239 };

         NoTimeInForceRules() : GroupBase(_fnum) {}
         ~NoTimeInForceRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDefinitionRequest (BT), application, 5 fields, 0 groups.
class MarketDefinitionRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDefinitionRequest() : Message(ctx(), _msgtype(), _traits, 5, &_ftha) {}
   ~MarketDefinitionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// MarketDefinition (BU), application, 36 fields, 5 groups.
class MarketDefinition : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDefinition() : Message(ctx(), _msgtype(), _traits, 36, &_ftha)
   {
      _groups.insert({
         { 1205, new NoTickRules },
         { 1232, new NoExecInstRules },
         { 1234, new NoLotTypeRules },
         { 1237, new NoOrdTypeRules },
         { 1239, new NoTimeInForceRules },
      });
   }
   ~MarketDefinition() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
   // MarketDefinition::NoTickRules
   class NoTickRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1205 };

      NoTickRules() : GroupBase(_fnum) {}
      ~NoTickRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
   // MarketDefinition::NoExecInstRules
   class NoExecInstRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1232 };

      NoExecInstRules() : GroupBase(_fnum) {}
      ~NoExecInstRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
   // MarketDefinition::NoLotTypeRules
   class NoLotTypeRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1234 };

      NoLotTypeRules() : GroupBase(_fnum) {}
      ~NoLotTypeRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
   // MarketDefinition::NoOrdTypeRules
   class NoOrdTypeRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1237 };

      NoOrdTypeRules() : GroupBase(_fnum) {}
      ~NoOrdTypeRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
   // MarketDefinition::NoTimeInForceRules
   class NoTimeInForceRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1239 };

      NoTimeInForceRules() : GroupBase(_fnum) {}
      ~NoTimeInForceRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDefinitionUpdateReport (BV), application, 37 fields, 5 groups.
class MarketDefinitionUpdateReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDefinitionUpdateReport() : Message(ctx(), _msgtype(), _traits, 37, &_ftha)
   {
      _groups.insert({
         { 1205, new NoTickRules },
         { 1232, new NoExecInstRules },
         { 1234, new NoLotTypeRules },
         { 1237, new NoOrdTypeRules },
         { 1239, new NoTimeInForceRules },
      });
   }
   ~MarketDefinitionUpdateReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
   // MarketDefinitionUpdateReport::NoTickRules
   class NoTickRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1205 };

      NoTickRules() : GroupBase(_fnum) {}
      ~NoTickRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
   // MarketDefinitionUpdateReport::NoExecInstRules
   class NoExecInstRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1232 };

      NoExecInstRules() : GroupBase(_fnum) {}
      ~NoExecInstRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
   // MarketDefinitionUpdateReport::NoLotTypeRules
   class NoLotTypeRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1234 };

      NoLotTypeRules() : GroupBase(_fnum) {}
      ~NoLotTypeRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
   // MarketDefinitionUpdateReport::NoOrdTypeRules
   class NoOrdTypeRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1237 };

      NoOrdTypeRules() : GroupBase(_fnum) {}
      ~NoOrdTypeRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
   // MarketDefinitionUpdateReport::NoTimeInForceRules
   class NoTimeInForceRules : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1239 };

      NoTimeInForceRules() : GroupBase(_fnum) {}
      ~NoTimeInForceRules() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ApplicationMessageRequest (BW), application, 7 fields, 2 groups.
class ApplicationMessageRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ApplicationMessageRequest() : Message(ctx(), _msgtype(), _traits, 7, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 1351, new NoApplIDs },
      });
   }
   ~ApplicationMessageRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ApplicationMessageRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ApplicationMessageRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoApplIDs (1351), application, 5 fields, 1 group, is unique, hash: 0x81c417f5
   // ApplicationMessageRequest::NoApplIDs
   class NoApplIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1351 };

      NoApplIDs() : GroupBase(_fnum) {}
      ~NoApplIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // ApplicationMessageRequest::NoApplIDs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // ApplicationMessageRequest::NoApplIDs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ApplicationMessageRequestAck (BX), application, 10 fields, 2 groups.
class ApplicationMessageRequestAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ApplicationMessageRequestAck() : Message(ctx(), _msgtype(), _traits, 10, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 1351, new NoApplIDs },
      });
   }
   ~ApplicationMessageRequestAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ApplicationMessageRequestAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ApplicationMessageRequestAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoApplIDs (1351), application, 7 fields, 1 group, is unique, hash: 0x68b521ae
   // ApplicationMessageRequestAck::NoApplIDs
   class NoApplIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1351 };

      NoApplIDs() : GroupBase(_fnum) {}
      ~NoApplIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // ApplicationMessageRequestAck::NoApplIDs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // ApplicationMessageRequestAck::NoApplIDs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ApplicationMessageReport (BY), application, 7 fields, 1 group.
class ApplicationMessageReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ApplicationMessageReport() : Message(ctx(), _msgtype(), _traits, 7, &_ftha)
   {
      _groups.insert({1351, new NoApplIDs });
   }
   ~ApplicationMessageReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoApplIDs (1351), application, 3 fields, 0 groups, is unique, hash: 0x83df0a67
   // ApplicationMessageReport::NoApplIDs
   class NoApplIDs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1351 };

      NoApplIDs() : GroupBase(_fnum) {}
      ~NoApplIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassActionReport (BZ), application, 181 fields, 11 groups.
class OrderMassActionReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderMassActionReport() : Message(ctx(), _msgtype(), _traits, 181, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 457, new NoUnderlyingSecurityAltID },
         { 534, new NoAffectedOrders },
         { 864, new NoEvents },
         { 887, new NoUnderlyingStips },
         { 1018, new NoInstrumentParties },
         { 1058, new NoUndlyInstrumentParties },
         { 1370, new NoNotAffectedOrders },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderMassActionReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassActionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassActionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassActionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassActionReport::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoAffectedOrders (534), application, 3 fields, 0 groups, shares static data, hash: 0xb213de0
   // OrderMassActionReport::NoAffectedOrders
   class NoAffectedOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 534 };

      NoAffectedOrders() : GroupBase(_fnum) {}
      ~NoAffectedOrders() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderMassActionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassActionReport::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderMassActionReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderMassActionReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // OrderMassActionReport::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // OrderMassActionReport::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoNotAffectedOrders (1370), application, 2 fields, 0 groups, shares static data, hash: 0x23a8ec11
   // OrderMassActionReport::NoNotAffectedOrders
   class NoNotAffectedOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1370 };

      NoNotAffectedOrders() : GroupBase(_fnum) {}
      ~NoNotAffectedOrders() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // OrderMassActionReport::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderMassActionReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderMassActionReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderMassActionReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Email (C), application, 15 fields, 5 groups.
class Email : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Email() : Message(ctx(), _msgtype(), _traits, 15, &_ftha)
   {
      _groups.insert({
         { 33, new NoLinesOfText },
         { 146, new NoRelatedSym },
         { 215, new NoRoutingIDs },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
      });
   }
   ~Email() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoLinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // Email::NoLinesOfText
   class NoLinesOfText : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 33 };

      NoLinesOfText() : GroupBase(_fnum) {}
      ~NoLinesOfText() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 88 fields, 4 groups, shares static data, hash: 0xdfc162b5
   // Email::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 88, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // Email::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // Email::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // Email::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // Email::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // Email::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // Email::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // Email::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // Email::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // Email::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Email::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // Email::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Email::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Email::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // Email::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // Email::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassActionRequest (CA), application, 175 fields, 9 groups.
class OrderMassActionRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderMassActionRequest() : Message(ctx(), _msgtype(), _traits, 175, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 457, new NoUnderlyingSecurityAltID },
         { 864, new NoEvents },
         { 887, new NoUnderlyingStips },
         { 1018, new NoInstrumentParties },
         { 1058, new NoUndlyInstrumentParties },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderMassActionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassActionRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassActionRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassActionRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassActionRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderMassActionRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassActionRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderMassActionRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderMassActionRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // OrderMassActionRequest::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // OrderMassActionRequest::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // OrderMassActionRequest::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderMassActionRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderMassActionRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderMassActionRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// UserNotification (CB), application, 5 fields, 0 groups.
class UserNotification : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   UserNotification() : Message(ctx(), _msgtype(), _traits, 5, &_ftha) {}
   ~UserNotification() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// StreamAssignmentRequest (CC), application, 3 fields, 1 group.
class StreamAssignmentRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   StreamAssignmentRequest() : Message(ctx(), _msgtype(), _traits, 3, &_ftha)
   {
      _groups.insert({1499, new NoAsgnReqs });
   }
   ~StreamAssignmentRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAsgnReqs (1499), application, 2 fields, 2 groups, is unique, hash: 0xfb6eba81
   // StreamAssignmentRequest::NoAsgnReqs
   class NoAsgnReqs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1499 };

      NoAsgnReqs() : GroupBase(_fnum) {}
      ~NoAsgnReqs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha));
         mb->get_groups().insert({
            { 146, new NoRelatedSym },
            { 453, new NoPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRelatedSym (146), application, 91 fields, 4 groups, is unique, hash: 0xf260bc10
      // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym
      class NoRelatedSym : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 146 };

         NoRelatedSym() : GroupBase(_fnum) {}
         ~NoRelatedSym() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 91, &_ftha));
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 864, new NoEvents },
               { 1018, new NoInstrumentParties },
               { 1483, new NoComplexEvents },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
         // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
         // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoInstrumentParties
         class NoInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1018 };

            NoInstrumentParties() : GroupBase(_fnum) {}
            ~NoInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
            // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
            class NoInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1052 };

               NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
         // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoComplexEvents
         class NoComplexEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1483 };

            NoComplexEvents() : GroupBase(_fnum) {}
            ~NoComplexEvents() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
               mb->get_groups().insert({1491, new NoComplexEventDates });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
            // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoComplexEvents::NoComplexEventDates
            class NoComplexEventDates : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1491 };

               NoComplexEventDates() : GroupBase(_fnum) {}
               ~NoComplexEventDates() = default;
               MessageBase *create_group() const
               {
                  MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
                  mb->get_groups().insert({1494, new NoComplexEventTimes });
                  return mb;
               }

               static const MsgType& get_msgtype() { return _msgtype; }

               /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
               // StreamAssignmentRequest::NoAsgnReqs::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
               class NoComplexEventTimes : public GroupBase // depth: 5
               {
                  static const FieldTrait *_traits;
                  static const FieldTrait_Hash_Array& _ftha;
                  static const MsgType& _msgtype;

               public:
                  enum { _fnum = 1494 };

                  NoComplexEventTimes() : GroupBase(_fnum) {}
                  ~NoComplexEventTimes() = default;
                  MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

                  static const MsgType& get_msgtype() { return _msgtype; }
               };
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // StreamAssignmentRequest::NoAsgnReqs::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // StreamAssignmentRequest::NoAsgnReqs::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// StreamAssignmentReport (CD), application, 4 fields, 1 group.
class StreamAssignmentReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   StreamAssignmentReport() : Message(ctx(), _msgtype(), _traits, 4, &_ftha)
   {
      _groups.insert({1499, new NoAsgnReqs });
   }
   ~StreamAssignmentReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAsgnReqs (1499), application, 2 fields, 2 groups, is unique, hash: 0x96df4c42
   // StreamAssignmentReport::NoAsgnReqs
   class NoAsgnReqs : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1499 };

      NoAsgnReqs() : GroupBase(_fnum) {}
      ~NoAsgnReqs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha));
         mb->get_groups().insert({
            { 146, new NoRelatedSym },
            { 453, new NoPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRelatedSym (146), application, 95 fields, 4 groups, is unique, hash: 0x33457f39
      // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym
      class NoRelatedSym : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 146 };

         NoRelatedSym() : GroupBase(_fnum) {}
         ~NoRelatedSym() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 95, &_ftha));
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 864, new NoEvents },
               { 1018, new NoInstrumentParties },
               { 1483, new NoComplexEvents },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
         // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
         // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoInstrumentParties
         class NoInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1018 };

            NoInstrumentParties() : GroupBase(_fnum) {}
            ~NoInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
            // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
            class NoInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1052 };

               NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
         // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoComplexEvents
         class NoComplexEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1483 };

            NoComplexEvents() : GroupBase(_fnum) {}
            ~NoComplexEvents() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
               mb->get_groups().insert({1491, new NoComplexEventDates });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
            // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoComplexEvents::NoComplexEventDates
            class NoComplexEventDates : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1491 };

               NoComplexEventDates() : GroupBase(_fnum) {}
               ~NoComplexEventDates() = default;
               MessageBase *create_group() const
               {
                  MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
                  mb->get_groups().insert({1494, new NoComplexEventTimes });
                  return mb;
               }

               static const MsgType& get_msgtype() { return _msgtype; }

               /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
               // StreamAssignmentReport::NoAsgnReqs::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
               class NoComplexEventTimes : public GroupBase // depth: 5
               {
                  static const FieldTrait *_traits;
                  static const FieldTrait_Hash_Array& _ftha;
                  static const MsgType& _msgtype;

               public:
                  enum { _fnum = 1494 };

                  NoComplexEventTimes() : GroupBase(_fnum) {}
                  ~NoComplexEventTimes() = default;
                  MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

                  static const MsgType& get_msgtype() { return _msgtype; }
               };
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // StreamAssignmentReport::NoAsgnReqs::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // StreamAssignmentReport::NoAsgnReqs::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// StreamAssignmentReportACK (CE), application, 6 fields, 0 groups.
class StreamAssignmentReportACK : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   StreamAssignmentReportACK() : Message(ctx(), _msgtype(), _traits, 6, &_ftha) {}
   ~StreamAssignmentReportACK() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// PartyDetailsListRequest (CF), application, 9 fields, 4 groups.
class PartyDetailsListRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   PartyDetailsListRequest() : Message(ctx(), _msgtype(), _traits, 9, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 1506, new NoPartyListResponseTypes },
         { 1508, new NoRequestedPartyRoles },
         { 1514, new NoPartyRelationships },
      });
   }
   ~PartyDetailsListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PartyDetailsListRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PartyDetailsListRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPartyListResponseTypes (1506), application, 1 field, 0 groups, is unique, hash: 0x80001de2
   // PartyDetailsListRequest::NoPartyListResponseTypes
   class NoPartyListResponseTypes : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1506 };

      NoPartyListResponseTypes() : GroupBase(_fnum) {}
      ~NoPartyListResponseTypes() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRequestedPartyRoles (1508), application, 1 field, 0 groups, is unique, hash: 0x80001de4
   // PartyDetailsListRequest::NoRequestedPartyRoles
   class NoRequestedPartyRoles : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1508 };

      NoRequestedPartyRoles() : GroupBase(_fnum) {}
      ~NoRequestedPartyRoles() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyRelationships (1514), application, 1 field, 0 groups, shares static data, hash: 0x80001dea
   // PartyDetailsListRequest::NoPartyRelationships
   class NoPartyRelationships : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1514 };

      NoPartyRelationships() : GroupBase(_fnum) {}
      ~NoPartyRelationships() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// PartyDetailsListReport (CG), application, 13 fields, 1 group.
class PartyDetailsListReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   PartyDetailsListReport() : Message(ctx(), _msgtype(), _traits, 13, &_ftha)
   {
      _groups.insert({1513, new NoPartyList });
   }
   ~PartyDetailsListReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyList (1513), application, 8 fields, 5 groups, is unique, hash: 0x9aa0a59c
   // PartyDetailsListReport::NoPartyList
   class NoPartyList : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 1513 };

      NoPartyList() : GroupBase(_fnum) {}
      ~NoPartyList() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({
            { 802, new NoPartySubIDs },
            { 1516, new NoPartyAltIDs },
            { 1522, new NoContextPartyIDs },
            { 1529, new NoRiskLimits },
            { 1562, new NoRelatedPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PartyDetailsListReport::NoPartyList::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyAltIDs (1516), application, 3 fields, 1 group, is unique, hash: 0xf96ddf5e
      // PartyDetailsListReport::NoPartyList::NoPartyAltIDs
      class NoPartyAltIDs : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1516 };

         NoPartyAltIDs() : GroupBase(_fnum) {}
         ~NoPartyAltIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1519, new NoPartyAltSubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartyAltSubIDs (1519), application, 2 fields, 0 groups, is unique, hash: 0x23bd995d
         // PartyDetailsListReport::NoPartyList::NoPartyAltIDs::NoPartyAltSubIDs
         class NoPartyAltSubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1519 };

            NoPartyAltSubIDs() : GroupBase(_fnum) {}
            ~NoPartyAltSubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoContextPartyIDs (1522), application, 4 fields, 1 group, is unique, hash: 0x8a81d9ee
      // PartyDetailsListReport::NoPartyList::NoContextPartyIDs
      class NoContextPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1522 };

         NoContextPartyIDs() : GroupBase(_fnum) {}
         ~NoContextPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1526, new NoContextPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoContextPartySubIDs (1526), application, 2 fields, 0 groups, is unique, hash: 0x23bd79b2
         // PartyDetailsListReport::NoPartyList::NoContextPartyIDs::NoContextPartySubIDs
         class NoContextPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1526 };

            NoContextPartySubIDs() : GroupBase(_fnum) {}
            ~NoContextPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoRiskLimits (1529), application, 6 fields, 2 groups, is unique, hash: 0x624034ba
      // PartyDetailsListReport::NoPartyList::NoRiskLimits
      class NoRiskLimits : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1529 };

         NoRiskLimits() : GroupBase(_fnum) {}
         ~NoRiskLimits() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({
               { 1534, new NoRiskInstruments },
               { 1559, new NoRiskWarningLevels },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoRiskInstruments (1534), application, 25 fields, 1 group, is unique, hash: 0xc3194044
         // PartyDetailsListReport::NoPartyList::NoRiskLimits::NoRiskInstruments
         class NoRiskInstruments : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1534 };

            NoRiskInstruments() : GroupBase(_fnum) {}
            ~NoRiskInstruments() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 25, &_ftha));
               mb->get_groups().insert({1540, new NoRiskSecurityAltID });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoRiskSecurityAltID (1540), application, 2 fields, 0 groups, is unique, hash: 0x23c34702
            // PartyDetailsListReport::NoPartyList::NoRiskLimits::NoRiskInstruments::NoRiskSecurityAltID
            class NoRiskSecurityAltID : public GroupBase // depth: 4
            {
               static const FieldTrait _traits[];
               static const FieldTrait_Hash_Array _ftha;
               static const MsgType _msgtype;

            public:
               enum { _fnum = 1540 };

               NoRiskSecurityAltID() : GroupBase(_fnum) {}
               ~NoRiskSecurityAltID() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoRiskWarningLevels (1559), application, 2 fields, 0 groups, is unique, hash: 0x23c0e4a7
         // PartyDetailsListReport::NoPartyList::NoRiskLimits::NoRiskWarningLevels
         class NoRiskWarningLevels : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1559 };

            NoRiskWarningLevels() : GroupBase(_fnum) {}
            ~NoRiskWarningLevels() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoRelatedPartyIDs (1562), application, 8 fields, 5 groups, is unique, hash: 0x9112482e
      // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs
      class NoRelatedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1562 };

         NoRelatedPartyIDs() : GroupBase(_fnum) {}
         ~NoRelatedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({
               { 1514, new NoPartyRelationships },
               { 1566, new NoRelatedPartySubIDs },
               { 1569, new NoRelatedPartyAltIDs },
               { 1575, new NoRelatedContextPartyIDs },
               { 1582, new NoRelationshipRiskLimits },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartyRelationships (1514), application, 1 field, 0 groups, shares static data, hash: 0x80001dea
         // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoPartyRelationships
         class NoPartyRelationships : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1514 };

            NoPartyRelationships() : GroupBase(_fnum) {}
            ~NoPartyRelationships() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoRelatedPartySubIDs (1566), application, 2 fields, 0 groups, is unique, hash: 0x23c00478
         // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelatedPartySubIDs
         class NoRelatedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1566 };

            NoRelatedPartySubIDs() : GroupBase(_fnum) {}
            ~NoRelatedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoRelatedPartyAltIDs (1569), application, 3 fields, 1 group, is unique, hash: 0x9b7453d8
         // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelatedPartyAltIDs
         class NoRelatedPartyAltIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1569 };

            NoRelatedPartyAltIDs() : GroupBase(_fnum) {}
            ~NoRelatedPartyAltIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1572, new NoRelatedPartyAltSubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoRelatedPartyAltSubIDs (1572), application, 2 fields, 0 groups, is unique, hash: 0x23c7430a
            // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelatedPartyAltIDs::NoRelatedPartyAltSubIDs
            class NoRelatedPartyAltSubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait _traits[];
               static const FieldTrait_Hash_Array _ftha;
               static const MsgType _msgtype;

            public:
               enum { _fnum = 1572 };

               NoRelatedPartyAltSubIDs() : GroupBase(_fnum) {}
               ~NoRelatedPartyAltSubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoRelatedContextPartyIDs (1575), application, 4 fields, 1 group, is unique, hash: 0x5e804885
         // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelatedContextPartyIDs
         class NoRelatedContextPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1575 };

            NoRelatedContextPartyIDs() : GroupBase(_fnum) {}
            ~NoRelatedContextPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1579, new NoRelatedContextPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoRelatedContextPartySubIDs (1579), application, 2 fields, 0 groups, is unique, hash: 0x23c6622a
            // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelatedContextPartyIDs::NoRelatedContextPartySubIDs
            class NoRelatedContextPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait _traits[];
               static const FieldTrait_Hash_Array _ftha;
               static const MsgType _msgtype;

            public:
               enum { _fnum = 1579 };

               NoRelatedContextPartySubIDs() : GroupBase(_fnum) {}
               ~NoRelatedContextPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoRelationshipRiskLimits (1582), application, 6 fields, 2 groups, is unique, hash: 0x3a609a8a
         // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelationshipRiskLimits
         class NoRelationshipRiskLimits : public GroupBase // depth: 3
         {
            static const FieldTrait _traits[];
            static const FieldTrait_Hash_Array _ftha;
            static const MsgType _msgtype;

         public:
            enum { _fnum = 1582 };

            NoRelationshipRiskLimits() : GroupBase(_fnum) {}
            ~NoRelationshipRiskLimits() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
               mb->get_groups().insert({
                  { 1587, new NoRelationshipRiskInstruments },
                  { 1613, new NoRelationshipRiskWarningLevels },
               });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoRelationshipRiskInstruments (1587), application, 25 fields, 1 group, is unique, hash: 0x86e5a711
            // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelationshipRiskLimits::NoRelationshipRiskInstruments
            class NoRelationshipRiskInstruments : public GroupBase // depth: 4
            {
               static const FieldTrait _traits[];
               static const FieldTrait_Hash_Array _ftha;
               static const MsgType _msgtype;

            public:
               enum { _fnum = 1587 };

               NoRelationshipRiskInstruments() : GroupBase(_fnum) {}
               ~NoRelationshipRiskInstruments() = default;
               MessageBase *create_group() const
               {
                  MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 25, &_ftha));
                  mb->get_groups().insert({1593, new NoRelationshipRiskSecurityAltID });
                  return mb;
               }

               static const MsgType& get_msgtype() { return _msgtype; }

               /// NoRelationshipRiskSecurityAltID (1593), application, 2 fields, 0 groups, is unique, hash: 0x23c4a0ef
               // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelationshipRiskLimits::NoRelationshipRiskInstruments::NoRelationshipRiskSecurityAltID
               class NoRelationshipRiskSecurityAltID : public GroupBase // depth: 5
               {
                  static const FieldTrait _traits[];
                  static const FieldTrait_Hash_Array _ftha;
                  static const MsgType _msgtype;

               public:
                  enum { _fnum = 1593 };

                  NoRelationshipRiskSecurityAltID() : GroupBase(_fnum) {}
                  ~NoRelationshipRiskSecurityAltID() = default;
                  MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

                  static const MsgType& get_msgtype() { return _msgtype; }
               };
            };

            /// NoRelationshipRiskWarningLevels (1613), application, 2 fields, 0 groups, is unique, hash: 0x23ca2e72
            // PartyDetailsListReport::NoPartyList::NoRelatedPartyIDs::NoRelationshipRiskLimits::NoRelationshipRiskWarningLevels
            class NoRelationshipRiskWarningLevels : public GroupBase // depth: 4
            {
               static const FieldTrait _traits[];
               static const FieldTrait_Hash_Array _ftha;
               static const MsgType _msgtype;

            public:
               enum { _fnum = 1613 };

               NoRelationshipRiskWarningLevels() : GroupBase(_fnum) {}
               ~NoRelationshipRiskWarningLevels() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderSingle (D), application, 243 fields, 11 groups.
class NewOrderSingle : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NewOrderSingle() : Message(ctx(), _msgtype(), _traits, 243, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 232, new NoStipulations },
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~NewOrderSingle() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
   // NewOrderSingle::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // NewOrderSingle::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // NewOrderSingle::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // NewOrderSingle::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderSingle::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // NewOrderSingle::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // NewOrderSingle::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderSingle::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // NewOrderSingle::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderSingle::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderSingle::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // NewOrderSingle::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // NewOrderSingle::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // NewOrderSingle::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // NewOrderSingle::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // NewOrderSingle::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // NewOrderSingle::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // NewOrderSingle::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // NewOrderSingle::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // NewOrderSingle::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // NewOrderSingle::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderList (E), application, 21 fields, 2 groups.
class NewOrderList : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NewOrderList() : Message(ctx(), _msgtype(), _traits, 21, &_ftha)
   {
      _groups.insert({
         { 73, new NoOrders },
         { 1116, new NoRootPartyIDs },
      });
   }
   ~NewOrderList() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 228 fields, 10 groups, is unique, hash: 0x8834a14a
   // NewOrderList::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 228, &_ftha));
         mb->get_groups().insert({
            { 78, new NoAllocs },
            { 232, new NoStipulations },
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 957, new NoStrategyParameters },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // NewOrderList::NoOrders::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // NewOrderList::NoOrders::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // NewOrderList::NoOrders::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // NewOrderList::NoOrders::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
      // NewOrderList::NoOrders::NoTradingSessions
      class NoTradingSessions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 386 };

         NoTradingSessions() : GroupBase(_fnum) {}
         ~NoTradingSessions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // NewOrderList::NoOrders::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // NewOrderList::NoOrders::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // NewOrderList::NoOrders::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // NewOrderList::NoOrders::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // NewOrderList::NoOrders::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // NewOrderList::NoOrders::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // NewOrderList::NoOrders::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // NewOrderList::NoOrders::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // NewOrderList::NoOrders::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
      // NewOrderList::NoOrders::NoStrategyParameters
      class NoStrategyParameters : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 957 };

         NoStrategyParameters() : GroupBase(_fnum) {}
         ~NoStrategyParameters() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // NewOrderList::NoOrders::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // NewOrderList::NoOrders::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // NewOrderList::NoOrders::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // NewOrderList::NoOrders::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // NewOrderList::NoOrders::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // NewOrderList::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // NewOrderList::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelRequest (F), application, 120 fields, 6 groups.
class OrderCancelRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderCancelRequest() : Message(ctx(), _msgtype(), _traits, 120, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderCancelRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderCancelRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // OrderCancelRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderCancelRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderCancelRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // OrderCancelRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // OrderCancelRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderCancelRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderCancelRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderCancelRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderCancelRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderCancelRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReplaceRequest (G), application, 240 fields, 10 groups.
class OrderCancelReplaceRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderCancelReplaceRequest() : Message(ctx(), _msgtype(), _traits, 240, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 711, new NoUnderlyings },
         { 768, new NoTrdRegTimestamps },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderCancelReplaceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
   // OrderCancelReplaceRequest::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // OrderCancelReplaceRequest::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // OrderCancelReplaceRequest::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // OrderCancelReplaceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderCancelReplaceRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderCancelReplaceRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderCancelReplaceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // OrderCancelReplaceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // OrderCancelReplaceRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // OrderCancelReplaceRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTrdRegTimestamps (768), application, 6 fields, 0 groups, shares static data, hash: 0xa981a905
   // OrderCancelReplaceRequest::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderCancelReplaceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // OrderCancelReplaceRequest::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderCancelReplaceRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderCancelReplaceRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderCancelReplaceRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderCancelReplaceRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderCancelReplaceRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderStatusRequest (H), application, 107 fields, 6 groups.
class OrderStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderStatusRequest() : Message(ctx(), _msgtype(), _traits, 107, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // OrderStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // OrderStatusRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // OrderStatusRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderStatusRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderStatusRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderStatusRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderStatusRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderStatusRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationInstruction (J), application, 183 fields, 14 groups.
class AllocationInstruction : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AllocationInstruction() : Message(ctx(), _msgtype(), _traits, 183, &_ftha)
   {
      _groups.insert({
         { 73, new NoOrders },
         { 78, new NoAllocs },
         { 124, new NoExecs },
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 753, new NoPosAmt },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1445, new NoRateSources },
         { 1483, new NoComplexEvents },
      });
   }
   ~AllocationInstruction() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // AllocationInstruction::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha));
         mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // AllocationInstruction::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // AllocationInstruction::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoAllocs (78), application, 41 fields, 4 groups, shares static data, hash: 0x9f17fe98
   // AllocationInstruction::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 41, &_ftha));
         mb->get_groups().insert({
            { 85, new NoDlvyInst },
            { 136, new NoMiscFees },
            { 539, new NoNestedPartyIDs },
            { 576, new NoClearingInstructions },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // AllocationInstruction::NoAllocs::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // AllocationInstruction::NoAllocs::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // AllocationInstruction::NoAllocs::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // AllocationInstruction::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationInstruction::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationInstruction::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // AllocationInstruction::NoAllocs::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 8 fields, 0 groups, shares static data, hash: 0x911017bd
   // AllocationInstruction::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // AllocationInstruction::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationInstruction::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationInstruction::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AllocationInstruction::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // AllocationInstruction::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AllocationInstruction::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // AllocationInstruction::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AllocationInstruction::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AllocationInstruction::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // AllocationInstruction::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // AllocationInstruction::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPosAmt (753), application, 3 fields, 0 groups, shares static data, hash: 0xa330fbb4
   // AllocationInstruction::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // AllocationInstruction::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // AllocationInstruction::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // AllocationInstruction::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // AllocationInstruction::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
   // AllocationInstruction::NoRateSources
   class NoRateSources : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1445 };

      NoRateSources() : GroupBase(_fnum) {}
      ~NoRateSources() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // AllocationInstruction::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // AllocationInstruction::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // AllocationInstruction::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ListCancelRequest (K), application, 8 fields, 1 group.
class ListCancelRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ListCancelRequest() : Message(ctx(), _msgtype(), _traits, 8, &_ftha)
   {
      _groups.insert({453, new NoPartyIDs });
   }
   ~ListCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ListCancelRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ListCancelRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ListExecute (L), application, 7 fields, 0 groups.
class ListExecute : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ListExecute() : Message(ctx(), _msgtype(), _traits, 7, &_ftha) {}
   ~ListExecute() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatusRequest (M), application, 4 fields, 0 groups.
class ListStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ListStatusRequest() : Message(ctx(), _msgtype(), _traits, 4, &_ftha) {}
   ~ListStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatus (N), application, 14 fields, 1 group.
class ListStatus : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ListStatus() : Message(ctx(), _msgtype(), _traits, 14, &_ftha)
   {
      _groups.insert({73, new NoOrders });
   }
   ~ListStatus() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoOrders (73), application, 13 fields, 0 groups, is unique, hash: 0xfe6bd753
   // ListStatus::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 13, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationInstructionAck (P), application, 16 fields, 2 groups.
class AllocationInstructionAck : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   AllocationInstructionAck() : Message(ctx(), _msgtype(), _traits, 16, &_ftha)
   {
      _groups.insert({
         { 78, new NoAllocs },
         { 453, new NoPartyIDs },
      });
   }
   ~AllocationInstructionAck() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoAllocs (78), application, 14 fields, 1 group, shares static data, hash: 0x9f5ae183
   // AllocationInstructionAck::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 14, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationInstructionAck::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationInstructionAck::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationInstructionAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationInstructionAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// DontKnowTrade (Q), application, 105 fields, 6 groups.
class DontKnowTrade : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   DontKnowTrade() : Message(ctx(), _msgtype(), _traits, 105, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~DontKnowTrade() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // DontKnowTrade::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // DontKnowTrade::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // DontKnowTrade::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // DontKnowTrade::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // DontKnowTrade::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // DontKnowTrade::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // DontKnowTrade::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // DontKnowTrade::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // DontKnowTrade::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // DontKnowTrade::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // DontKnowTrade::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // DontKnowTrade::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // DontKnowTrade::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // DontKnowTrade::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteRequest (R), application, 14 fields, 2 groups.
class QuoteRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteRequest() : Message(ctx(), _msgtype(), _traits, 14, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 1116, new NoRootPartyIDs },
      });
   }
   ~QuoteRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 148 fields, 10 groups, is unique, hash: 0x9c3f5d8
   // QuoteRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 148, &_ftha));
         mb->get_groups().insert({
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 735, new NoQuoteQualifiers },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1445, new NoRateSources },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // QuoteRequest::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // QuoteRequest::NoRelatedSym::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // QuoteRequest::NoRelatedSym::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 67 fields, 3 groups, shares static data, hash: 0x3cf045a4
      // QuoteRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 67, &_ftha));
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // QuoteRequest::NoRelatedSym::NoLegs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // QuoteRequest::NoRelatedSym::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // QuoteRequest::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // QuoteRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
      // QuoteRequest::NoRelatedSym::NoQuoteQualifiers
      class NoQuoteQualifiers : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 735 };

         NoQuoteQualifiers() : GroupBase(_fnum) {}
         ~NoQuoteQualifiers() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // QuoteRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // QuoteRequest::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // QuoteRequest::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
      // QuoteRequest::NoRelatedSym::NoRateSources
      class NoRateSources : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1445 };

         NoRateSources() : GroupBase(_fnum) {}
         ~NoRateSources() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // QuoteRequest::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // QuoteRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // QuoteRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // QuoteRequest::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // QuoteRequest::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Quote (S), application, 180 fields, 10 groups.
class Quote : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   Quote() : Message(ctx(), _msgtype(), _traits, 180, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 735, new NoQuoteQualifiers },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1445, new NoRateSources },
         { 1483, new NoComplexEvents },
      });
   }
   ~Quote() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // Quote::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // Quote::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // Quote::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Quote::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 72 fields, 3 groups, shares static data, hash: 0x8277854f
   // Quote::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 539, new NoNestedPartyIDs },
            { 604, new NoLegSecurityAltID },
            { 683, new NoLegStipulations },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // Quote::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // Quote::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Quote::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // Quote::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // Quote::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Quote::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Quote::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // Quote::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // Quote::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // Quote::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // Quote::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // Quote::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // Quote::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
   // Quote::NoRateSources
   class NoRateSources : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1445 };

      NoRateSources() : GroupBase(_fnum) {}
      ~NoRateSources() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // Quote::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // Quote::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // Quote::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SettlementInstructions (T), application, 10 fields, 1 group.
class SettlementInstructions : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SettlementInstructions() : Message(ctx(), _msgtype(), _traits, 10, &_ftha)
   {
      _groups.insert({778, new NoSettlInst });
   }
   ~SettlementInstructions() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSettlInst (778), application, 26 fields, 2 groups, is unique, hash: 0xa3b6cd5f
   // SettlementInstructions::NoSettlInst
   class NoSettlInst : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 778 };

      NoSettlInst() : GroupBase(_fnum) {}
      ~NoSettlInst() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 26, &_ftha));
         mb->get_groups().insert({
            { 85, new NoDlvyInst },
            { 453, new NoPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // SettlementInstructions::NoSettlInst::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // SettlementInstructions::NoSettlInst::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // SettlementInstructions::NoSettlInst::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // SettlementInstructions::NoSettlInst::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // SettlementInstructions::NoSettlInst::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequest (V), application, 15 fields, 4 groups.
class MarketDataRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDataRequest() : Message(ctx(), _msgtype(), _traits, 15, &_ftha)
   {
      _groups.insert({
         { 146, new NoRelatedSym },
         { 267, new NoMDEntryTypes },
         { 386, new NoTradingSessions },
         { 453, new NoPartyIDs },
      });
   }
   ~MarketDataRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 96 fields, 6 groups, is unique, hash: 0xd59a3124
   // MarketDataRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 96, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // MarketDataRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // MarketDataRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // MarketDataRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // MarketDataRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // MarketDataRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // MarketDataRequest::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // MarketDataRequest::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // MarketDataRequest::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // MarketDataRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // MarketDataRequest::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoMDEntryTypes (267), application, 1 field, 0 groups, is unique, hash: 0x8000190c
   // MarketDataRequest::NoMDEntryTypes
   class NoMDEntryTypes : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 267 };

      NoMDEntryTypes() : GroupBase(_fnum) {}
      ~NoMDEntryTypes() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // MarketDataRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MarketDataRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MarketDataRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataSnapshotFullRefresh (W), application, 112 fields, 8 groups.
class MarketDataSnapshotFullRefresh : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDataSnapshotFullRefresh() : Message(ctx(), _msgtype(), _traits, 112, &_ftha)
   {
      _groups.insert({
         { 215, new NoRoutingIDs },
         { 268, new NoMDEntries },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~MarketDataSnapshotFullRefresh() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // MarketDataSnapshotFullRefresh::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMDEntries (268), application, 74 fields, 3 groups, is unique, hash: 0x60c1a94d
   // MarketDataSnapshotFullRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 74, &_ftha));
         mb->get_groups().insert({
            { 453, new NoPartyIDs },
            { 1177, new NoOfSecSizes },
            { 1445, new NoRateSources },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // MarketDataSnapshotFullRefresh::NoMDEntries::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // MarketDataSnapshotFullRefresh::NoMDEntries::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoOfSecSizes (1177), application, 2 fields, 0 groups, shares static data, hash: 0x2390f447
      // MarketDataSnapshotFullRefresh::NoMDEntries::NoOfSecSizes
      class NoOfSecSizes : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1177 };

         NoOfSecSizes() : GroupBase(_fnum) {}
         ~NoOfSecSizes() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
      // MarketDataSnapshotFullRefresh::NoMDEntries::NoRateSources
      class NoRateSources : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1445 };

         NoRateSources() : GroupBase(_fnum) {}
         ~NoRateSources() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // MarketDataSnapshotFullRefresh::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // MarketDataSnapshotFullRefresh::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // MarketDataSnapshotFullRefresh::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // MarketDataSnapshotFullRefresh::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // MarketDataSnapshotFullRefresh::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // MarketDataSnapshotFullRefresh::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // MarketDataSnapshotFullRefresh::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // MarketDataSnapshotFullRefresh::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // MarketDataSnapshotFullRefresh::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // MarketDataSnapshotFullRefresh::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataIncrementalRefresh (X), application, 12 fields, 2 groups.
class MarketDataIncrementalRefresh : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDataIncrementalRefresh() : Message(ctx(), _msgtype(), _traits, 12, &_ftha)
   {
      _groups.insert({
         { 215, new NoRoutingIDs },
         { 268, new NoMDEntries },
      });
   }
   ~MarketDataIncrementalRefresh() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // MarketDataIncrementalRefresh::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMDEntries (268), application, 178 fields, 10 groups, is unique, hash: 0xd1da0e59
   // MarketDataIncrementalRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 178, &_ftha));
         mb->get_groups().insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1175, new NoStatsIndicators },
            { 1177, new NoOfSecSizes },
            { 1445, new NoRateSources },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // MarketDataIncrementalRefresh::NoMDEntries::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // MarketDataIncrementalRefresh::NoMDEntries::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // MarketDataIncrementalRefresh::NoMDEntries::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // MarketDataIncrementalRefresh::NoMDEntries::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // MarketDataIncrementalRefresh::NoMDEntries::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // MarketDataIncrementalRefresh::NoMDEntries::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // MarketDataIncrementalRefresh::NoMDEntries::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // MarketDataIncrementalRefresh::NoMDEntries::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoStatsIndicators (1175), application, 1 field, 0 groups, is unique, hash: 0x80001c99
      // MarketDataIncrementalRefresh::NoMDEntries::NoStatsIndicators
      class NoStatsIndicators : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 1175 };

         NoStatsIndicators() : GroupBase(_fnum) {}
         ~NoStatsIndicators() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoOfSecSizes (1177), application, 2 fields, 0 groups, shares static data, hash: 0x2390f447
      // MarketDataIncrementalRefresh::NoMDEntries::NoOfSecSizes
      class NoOfSecSizes : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1177 };

         NoOfSecSizes() : GroupBase(_fnum) {}
         ~NoOfSecSizes() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoRateSources (1445), application, 3 fields, 0 groups, shares static data, hash: 0x37c1ebc3
      // MarketDataIncrementalRefresh::NoMDEntries::NoRateSources
      class NoRateSources : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1445 };

         NoRateSources() : GroupBase(_fnum) {}
         ~NoRateSources() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // MarketDataIncrementalRefresh::NoMDEntries::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // MarketDataIncrementalRefresh::NoMDEntries::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // MarketDataIncrementalRefresh::NoMDEntries::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequestReject (Y), application, 7 fields, 2 groups.
class MarketDataRequestReject : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MarketDataRequestReject() : Message(ctx(), _msgtype(), _traits, 7, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 816, new NoAltMDSource },
      });
   }
   ~MarketDataRequestReject() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MarketDataRequestReject::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MarketDataRequestReject::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoAltMDSource (816), application, 1 field, 0 groups, is unique, hash: 0x80001b30
   // MarketDataRequestReject::NoAltMDSource
   class NoAltMDSource : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 816 };

      NoAltMDSource() : GroupBase(_fnum) {}
      ~NoAltMDSource() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteCancel (Z), application, 14 fields, 3 groups.
class QuoteCancel : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteCancel() : Message(ctx(), _msgtype(), _traits, 14, &_ftha)
   {
      _groups.insert({
         { 295, new NoQuoteEntries },
         { 453, new NoPartyIDs },
         { 1461, new NoTargetPartyIDs },
      });
   }
   ~QuoteCancel() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoQuoteEntries (295), application, 99 fields, 6 groups, is unique, hash: 0x4b72bde2
   // QuoteCancel::NoQuoteEntries
   class NoQuoteEntries : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 295 };

      NoQuoteEntries() : GroupBase(_fnum) {}
      ~NoQuoteEntries() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 99, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteCancel::NoQuoteEntries::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
      // QuoteCancel::NoQuoteEntries::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
            mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteCancel::NoQuoteEntries::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // QuoteCancel::NoQuoteEntries::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // QuoteCancel::NoQuoteEntries::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // QuoteCancel::NoQuoteEntries::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // QuoteCancel::NoQuoteEntries::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // QuoteCancel::NoQuoteEntries::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // QuoteCancel::NoQuoteEntries::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // QuoteCancel::NoQuoteEntries::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteCancel::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteCancel::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // QuoteCancel::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteStatusRequest (a), application, 109 fields, 8 groups.
class QuoteStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   QuoteStatusRequest() : Message(ctx(), _msgtype(), _traits, 109, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~QuoteStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // QuoteStatusRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteStatusRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // QuoteStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // QuoteStatusRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // QuoteStatusRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // QuoteStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // QuoteStatusRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // QuoteStatusRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // QuoteStatusRequest::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // QuoteStatusRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // QuoteStatusRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // QuoteStatusRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MassQuoteAcknowledgement (b), application, 16 fields, 3 groups.
class MassQuoteAcknowledgement : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MassQuoteAcknowledgement() : Message(ctx(), _msgtype(), _traits, 16, &_ftha)
   {
      _groups.insert({
         { 296, new NoQuoteSets },
         { 453, new NoPartyIDs },
         { 1461, new NoTargetPartyIDs },
      });
   }
   ~MassQuoteAcknowledgement() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoQuoteSets (296), application, 80 fields, 4 groups, is unique, hash: 0xc15c4000
   // MassQuoteAcknowledgement::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 80, &_ftha));
         mb->get_groups().insert({
            { 295, new NoQuoteEntries },
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoQuoteEntries (295), application, 118 fields, 5 groups, is unique, hash: 0x90923a5b
      // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 118, &_ftha));
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 864, new NoEvents },
               { 1018, new NoInstrumentParties },
               { 1483, new NoComplexEvents },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoLegs
         class NoLegs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 555 };

            NoLegs() : GroupBase(_fnum) {}
            ~NoLegs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
               mb->get_groups().insert({604, new NoLegSecurityAltID });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
            // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoLegs::NoLegSecurityAltID
            class NoLegSecurityAltID : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 604 };

               NoLegSecurityAltID() : GroupBase(_fnum) {}
               ~NoLegSecurityAltID() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoInstrumentParties
         class NoInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1018 };

            NoInstrumentParties() : GroupBase(_fnum) {}
            ~NoInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
            // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoInstrumentParties::NoInstrumentPartySubIDs
            class NoInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1052 };

               NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoComplexEvents
         class NoComplexEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1483 };

            NoComplexEvents() : GroupBase(_fnum) {}
            ~NoComplexEvents() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
               mb->get_groups().insert({1491, new NoComplexEventDates });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
            // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoComplexEvents::NoComplexEventDates
            class NoComplexEventDates : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1491 };

               NoComplexEventDates() : GroupBase(_fnum) {}
               ~NoComplexEventDates() = default;
               MessageBase *create_group() const
               {
                  MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
                  mb->get_groups().insert({1494, new NoComplexEventTimes });
                  return mb;
               }

               static const MsgType& get_msgtype() { return _msgtype; }

               /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
               // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
               class NoComplexEventTimes : public GroupBase // depth: 5
               {
                  static const FieldTrait *_traits;
                  static const FieldTrait_Hash_Array& _ftha;
                  static const MsgType& _msgtype;

               public:
                  enum { _fnum = 1494 };

                  NoComplexEventTimes() : GroupBase(_fnum) {}
                  ~NoComplexEventTimes() = default;
                  MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

                  static const MsgType& get_msgtype() { return _msgtype; }
               };
            };
         };
      };

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MassQuoteAcknowledgement::NoQuoteSets::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MassQuoteAcknowledgement::NoQuoteSets::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // MassQuoteAcknowledgement::NoQuoteSets::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // MassQuoteAcknowledgement::NoQuoteSets::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MassQuoteAcknowledgement::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MassQuoteAcknowledgement::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // MassQuoteAcknowledgement::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinitionRequest (c), application, 120 fields, 8 groups.
class SecurityDefinitionRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityDefinitionRequest() : Message(ctx(), _msgtype(), _traits, 120, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityDefinitionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // SecurityDefinitionRequest::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityDefinitionRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityDefinitionRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityDefinitionRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityDefinitionRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityDefinitionRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityDefinitionRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityDefinitionRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityDefinitionRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityDefinitionRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityDefinitionRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityDefinitionRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityDefinitionRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityDefinitionRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityDefinitionRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityDefinitionRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinition (d), application, 124 fields, 9 groups.
class SecurityDefinition : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityDefinition() : Message(ctx(), _msgtype(), _traits, 124, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1310, new NoMarketSegments },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityDefinition() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // SecurityDefinition::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityDefinition::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityDefinition::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityDefinition::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityDefinition::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityDefinition::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityDefinition::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityDefinition::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityDefinition::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityDefinition::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityDefinition::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityDefinition::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityDefinition::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoMarketSegments (1310), application, 21 fields, 5 groups, shares static data, hash: 0x8496fa62
   // SecurityDefinition::NoMarketSegments
   class NoMarketSegments : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1310 };

      NoMarketSegments() : GroupBase(_fnum) {}
      ~NoMarketSegments() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 21, &_ftha));
         mb->get_groups().insert({
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // SecurityDefinition::NoMarketSegments::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // SecurityDefinition::NoMarketSegments::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // SecurityDefinition::NoMarketSegments::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // SecurityDefinition::NoMarketSegments::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // SecurityDefinition::NoMarketSegments::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // SecurityDefinition::NoMarketSegments::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // SecurityDefinition::NoMarketSegments::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // SecurityDefinition::NoMarketSegments::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // SecurityDefinition::NoMarketSegments::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // SecurityDefinition::NoMarketSegments::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // SecurityDefinition::NoMarketSegments::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityDefinition::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityDefinition::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityDefinition::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatusRequest (e), application, 100 fields, 7 groups.
class SecurityStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityStatusRequest() : Message(ctx(), _msgtype(), _traits, 100, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityStatusRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityStatusRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityStatusRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityStatusRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityStatusRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityStatusRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityStatusRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityStatusRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityStatusRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityStatusRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatus (f), application, 124 fields, 7 groups.
class SecurityStatus : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityStatus() : Message(ctx(), _msgtype(), _traits, 124, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityStatus() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityStatus::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityStatus::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityStatus::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityStatus::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityStatus::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityStatus::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityStatus::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityStatus::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityStatus::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityStatus::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityStatus::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityStatus::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityStatus::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityStatus::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityStatus::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatusRequest (g), application, 9 fields, 0 groups.
class TradingSessionStatusRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradingSessionStatusRequest() : Message(ctx(), _msgtype(), _traits, 9, &_ftha) {}
   ~TradingSessionStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatus (h), application, 112 fields, 4 groups.
class TradingSessionStatus : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   TradingSessionStatus() : Message(ctx(), _msgtype(), _traits, 112, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~TradingSessionStatus() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradingSessionStatus::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // TradingSessionStatus::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // TradingSessionStatus::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // TradingSessionStatus::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // TradingSessionStatus::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // TradingSessionStatus::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // TradingSessionStatus::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// header (header), application, 29 fields, 1 group.
class header : public MessageBase
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

   begin_string *_begin_string;
   body_length *_body_length;
   msg_type *_msg_type;

public:
   header() : MessageBase(ctx(), _msgtype(), _traits, 29, &_ftha),
      _begin_string(new begin_string(ctx()._beginStr)), _body_length(new body_length), _msg_type(new msg_type) { add_preamble(); }
   ~header() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	begin_string *get_begin_string() { return _begin_string; };
	body_length *get_body_length() { return _body_length; };
	msg_type *get_msg_type() { return _msg_type; };

	void add_preamble()
	{
		add_field(Common_BeginString, 1, _begin_string, false);
		add_field(Common_BodyLength, 2, _body_length, false);
		add_field(Common_MsgType, 3, _msg_type, false);
	}

   /// NoHops (627), application, 3 fields, 0 groups, is unique, hash: 0x7f240fc4
   // header::NoHops
   class NoHops : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 627 };

      NoHops() : GroupBase(_fnum) {}
      ~NoHops() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MassQuote (i), application, 11 fields, 2 groups.
class MassQuote : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   MassQuote() : Message(ctx(), _msgtype(), _traits, 11, &_ftha)
   {
      _groups.insert({
         { 296, new NoQuoteSets },
         { 453, new NoPartyIDs },
      });
   }
   ~MassQuote() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoQuoteSets (296), application, 77 fields, 4 groups, is unique, hash: 0xf4f5297
   // MassQuote::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 77, &_ftha));
         mb->get_groups().insert({
            { 295, new NoQuoteEntries },
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoQuoteEntries (295), application, 116 fields, 5 groups, is unique, hash: 0xd735a2b4
      // MassQuote::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static const FieldTrait _traits[];
         static const FieldTrait_Hash_Array _ftha;
         static const MsgType _msgtype;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 116, &_ftha));
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 864, new NoEvents },
               { 1018, new NoInstrumentParties },
               { 1483, new NoComplexEvents },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoLegs
         class NoLegs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 555 };

            NoLegs() : GroupBase(_fnum) {}
            ~NoLegs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
               mb->get_groups().insert({604, new NoLegSecurityAltID });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
            // MassQuote::NoQuoteSets::NoQuoteEntries::NoLegs::NoLegSecurityAltID
            class NoLegSecurityAltID : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 604 };

               NoLegSecurityAltID() : GroupBase(_fnum) {}
               ~NoLegSecurityAltID() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoInstrumentParties
         class NoInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1018 };

            NoInstrumentParties() : GroupBase(_fnum) {}
            ~NoInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
            // MassQuote::NoQuoteSets::NoQuoteEntries::NoInstrumentParties::NoInstrumentPartySubIDs
            class NoInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1052 };

               NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoComplexEvents
         class NoComplexEvents : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1483 };

            NoComplexEvents() : GroupBase(_fnum) {}
            ~NoComplexEvents() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
               mb->get_groups().insert({1491, new NoComplexEventDates });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
            // MassQuote::NoQuoteSets::NoQuoteEntries::NoComplexEvents::NoComplexEventDates
            class NoComplexEventDates : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1491 };

               NoComplexEventDates() : GroupBase(_fnum) {}
               ~NoComplexEventDates() = default;
               MessageBase *create_group() const
               {
                  MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
                  mb->get_groups().insert({1494, new NoComplexEventTimes });
                  return mb;
               }

               static const MsgType& get_msgtype() { return _msgtype; }

               /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
               // MassQuote::NoQuoteSets::NoQuoteEntries::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
               class NoComplexEventTimes : public GroupBase // depth: 5
               {
                  static const FieldTrait *_traits;
                  static const FieldTrait_Hash_Array& _ftha;
                  static const MsgType& _msgtype;

               public:
                  enum { _fnum = 1494 };

                  NoComplexEventTimes() : GroupBase(_fnum) {}
                  ~NoComplexEventTimes() = default;
                  MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

                  static const MsgType& get_msgtype() { return _msgtype; }
               };
            };
         };
      };

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MassQuote::NoQuoteSets::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MassQuote::NoQuoteSets::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // MassQuote::NoQuoteSets::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // MassQuote::NoQuoteSets::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MassQuote::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MassQuote::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// BusinessMessageReject (j), application, 10 fields, 0 groups.
class BusinessMessageReject : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   BusinessMessageReject() : Message(ctx(), _msgtype(), _traits, 10, &_ftha) {}
   ~BusinessMessageReject() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// BidRequest (k), application, 29 fields, 2 groups.
class BidRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   BidRequest() : Message(ctx(), _msgtype(), _traits, 29, &_ftha)
   {
      _groups.insert({
         { 398, new NoBidDescriptors },
         { 420, new NoBidComponents },
      });
   }
   ~BidRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoBidDescriptors (398), application, 11 fields, 0 groups, is unique, hash: 0x80e3528e
   // BidRequest::NoBidDescriptors
   class NoBidDescriptors : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 398 };

      NoBidDescriptors() : GroupBase(_fnum) {}
      ~NoBidDescriptors() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 11, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoBidComponents (420), application, 9 fields, 0 groups, is unique, hash: 0xbb9cc9f3
   // BidRequest::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 9, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// BidResponse (l), application, 3 fields, 1 group.
class BidResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   BidResponse() : Message(ctx(), _msgtype(), _traits, 3, &_ftha)
   {
      _groups.insert({420, new NoBidComponents });
   }
   ~BidResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoBidComponents (420), application, 18 fields, 0 groups, is unique, hash: 0x7610cb63
   // BidResponse::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 18, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ListStrikePrice (m), application, 4 fields, 1 group.
class ListStrikePrice : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   ListStrikePrice() : Message(ctx(), _msgtype(), _traits, 4, &_ftha)
   {
      _groups.insert({428, new NoStrikes });
   }
   ~ListStrikePrice() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStrikes (428), application, 98 fields, 5 groups, is unique, hash: 0xd91b2eb9
   // ListStrikePrice::NoStrikes
   class NoStrikes : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 428 };

      NoStrikes() : GroupBase(_fnum) {}
      ~NoStrikes() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 98, &_ftha));
         mb->get_groups().insert({
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 1018, new NoInstrumentParties },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // ListStrikePrice::NoStrikes::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // ListStrikePrice::NoStrikes::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // ListStrikePrice::NoStrikes::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // ListStrikePrice::NoStrikes::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // ListStrikePrice::NoStrikes::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // ListStrikePrice::NoStrikes::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // ListStrikePrice::NoStrikes::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // ListStrikePrice::NoStrikes::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // ListStrikePrice::NoStrikes::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // ListStrikePrice::NoStrikes::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // ListStrikePrice::NoStrikes::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // ListStrikePrice::NoStrikes::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RegistrationInstructions (o), application, 12 fields, 3 groups.
class RegistrationInstructions : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   RegistrationInstructions() : Message(ctx(), _msgtype(), _traits, 12, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 473, new NoRegistDtls },
         { 510, new NoDistribInsts },
      });
   }
   ~RegistrationInstructions() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RegistrationInstructions::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RegistrationInstructions::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRegistDtls (473), application, 8 fields, 1 group, is unique, hash: 0xffbc6e69
   // RegistrationInstructions::NoRegistDtls
   class NoRegistDtls : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 473 };

      NoRegistDtls() : GroupBase(_fnum) {}
      ~NoRegistDtls() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // RegistrationInstructions::NoRegistDtls::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // RegistrationInstructions::NoRegistDtls::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoDistribInsts (510), application, 8 fields, 0 groups, is unique, hash: 0xaec1cd2b
   // RegistrationInstructions::NoDistribInsts
   class NoDistribInsts : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 510 };

      NoDistribInsts() : GroupBase(_fnum) {}
      ~NoDistribInsts() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// RegistrationInstructionsResponse (p), application, 10 fields, 1 group.
class RegistrationInstructionsResponse : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   RegistrationInstructionsResponse() : Message(ctx(), _msgtype(), _traits, 10, &_ftha)
   {
      _groups.insert({453, new NoPartyIDs });
   }
   ~RegistrationInstructionsResponse() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RegistrationInstructionsResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RegistrationInstructionsResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassCancelRequest (q), application, 174 fields, 9 groups.
class OrderMassCancelRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderMassCancelRequest() : Message(ctx(), _msgtype(), _traits, 174, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 457, new NoUnderlyingSecurityAltID },
         { 864, new NoEvents },
         { 887, new NoUnderlyingStips },
         { 1018, new NoInstrumentParties },
         { 1058, new NoUndlyInstrumentParties },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderMassCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassCancelRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassCancelRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassCancelRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderMassCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassCancelRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderMassCancelRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderMassCancelRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // OrderMassCancelRequest::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // OrderMassCancelRequest::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // OrderMassCancelRequest::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderMassCancelRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderMassCancelRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderMassCancelRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassCancelReport (r), application, 182 fields, 11 groups.
class OrderMassCancelReport : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   OrderMassCancelReport() : Message(ctx(), _msgtype(), _traits, 182, &_ftha)
   {
      _groups.insert({
         { 453, new NoPartyIDs },
         { 454, new NoSecurityAltID },
         { 457, new NoUnderlyingSecurityAltID },
         { 534, new NoAffectedOrders },
         { 864, new NoEvents },
         { 887, new NoUnderlyingStips },
         { 1018, new NoInstrumentParties },
         { 1058, new NoUndlyInstrumentParties },
         { 1370, new NoNotAffectedOrders },
         { 1461, new NoTargetPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~OrderMassCancelReport() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassCancelReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassCancelReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassCancelReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassCancelReport::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoAffectedOrders (534), application, 3 fields, 0 groups, shares static data, hash: 0xb213de0
   // OrderMassCancelReport::NoAffectedOrders
   class NoAffectedOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 534 };

      NoAffectedOrders() : GroupBase(_fnum) {}
      ~NoAffectedOrders() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // OrderMassCancelReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassCancelReport::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // OrderMassCancelReport::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // OrderMassCancelReport::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // OrderMassCancelReport::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // OrderMassCancelReport::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoNotAffectedOrders (1370), application, 2 fields, 0 groups, shares static data, hash: 0x23a8ec11
   // OrderMassCancelReport::NoNotAffectedOrders
   class NoNotAffectedOrders : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1370 };

      NoNotAffectedOrders() : GroupBase(_fnum) {}
      ~NoNotAffectedOrders() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTargetPartyIDs (1461), application, 3 fields, 0 groups, shares static data, hash: 0x77c3a9d6
   // OrderMassCancelReport::NoTargetPartyIDs
   class NoTargetPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1461 };

      NoTargetPartyIDs() : GroupBase(_fnum) {}
      ~NoTargetPartyIDs() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // OrderMassCancelReport::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // OrderMassCancelReport::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // OrderMassCancelReport::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderCross (s), application, 190 fields, 11 groups.
class NewOrderCross : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   NewOrderCross() : Message(ctx(), _msgtype(), _traits, 190, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 386, new NoTradingSessions },
         { 454, new NoSecurityAltID },
         { 552, new NoSides },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1116, new NoRootPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~NewOrderCross() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // NewOrderCross::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderCross::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderCross::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 43 fields, 2 groups, shares static data, hash: 0x591217f5
   // NewOrderCross::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 43, &_ftha));
         mb->get_groups().insert({
            { 78, new NoAllocs },
            { 453, new NoPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // NewOrderCross::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // NewOrderCross::NoSides::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // NewOrderCross::NoSides::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // NewOrderCross::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // NewOrderCross::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // NewOrderCross::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // NewOrderCross::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // NewOrderCross::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderCross::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderCross::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // NewOrderCross::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // NewOrderCross::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // NewOrderCross::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // NewOrderCross::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // NewOrderCross::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // NewOrderCross::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // NewOrderCross::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // NewOrderCross::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // NewOrderCross::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // NewOrderCross::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // NewOrderCross::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CrossOrderCancelReplaceRequest (t), application, 193 fields, 11 groups.
class CrossOrderCancelReplaceRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CrossOrderCancelReplaceRequest() : Message(ctx(), _msgtype(), _traits, 193, &_ftha)
   {
      _groups.insert({
         { 232, new NoStipulations },
         { 386, new NoTradingSessions },
         { 454, new NoSecurityAltID },
         { 552, new NoSides },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 957, new NoStrategyParameters },
         { 1018, new NoInstrumentParties },
         { 1116, new NoRootPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~CrossOrderCancelReplaceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CrossOrderCancelReplaceRequest::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // CrossOrderCancelReplaceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CrossOrderCancelReplaceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 43 fields, 2 groups, shares static data, hash: 0x591217f5
   // CrossOrderCancelReplaceRequest::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 43, &_ftha));
         mb->get_groups().insert({
            { 78, new NoAllocs },
            { 453, new NoPartyIDs },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // CrossOrderCancelReplaceRequest::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // CrossOrderCancelReplaceRequest::NoSides::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // CrossOrderCancelReplaceRequest::NoSides::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // CrossOrderCancelReplaceRequest::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // CrossOrderCancelReplaceRequest::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CrossOrderCancelReplaceRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CrossOrderCancelReplaceRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // CrossOrderCancelReplaceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CrossOrderCancelReplaceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStrategyParameters (957), application, 3 fields, 0 groups, shares static data, hash: 0x571a4f4c
   // CrossOrderCancelReplaceRequest::NoStrategyParameters
   class NoStrategyParameters : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 957 };

      NoStrategyParameters() : GroupBase(_fnum) {}
      ~NoStrategyParameters() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CrossOrderCancelReplaceRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CrossOrderCancelReplaceRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // CrossOrderCancelReplaceRequest::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // CrossOrderCancelReplaceRequest::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CrossOrderCancelReplaceRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CrossOrderCancelReplaceRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CrossOrderCancelReplaceRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// trailer (trailer), application, 3 fields, 0 groups.
class trailer : public MessageBase
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

   check_sum *_check_sum;

public:
   trailer() : MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha),
      _check_sum(new check_sum) { add_preamble(); }
   ~trailer() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	check_sum *get_check_sum() { return _check_sum; };

	void add_preamble()
	{
		add_field(Common_CheckSum, 3, _check_sum, false);
	}
};

//-------------------------------------------------------------------------------------------------
/// CrossOrderCancelRequest (u), application, 99 fields, 8 groups.
class CrossOrderCancelRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   CrossOrderCancelRequest() : Message(ctx(), _msgtype(), _traits, 99, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 552, new NoSides },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 1018, new NoInstrumentParties },
         { 1116, new NoRootPartyIDs },
         { 1483, new NoComplexEvents },
      });
   }
   ~CrossOrderCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CrossOrderCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 18 fields, 1 group, is unique, hash: 0x4a9f9102
   // CrossOrderCancelRequest::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 18, &_ftha));
         mb->get_groups().insert({453, new NoPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // CrossOrderCancelRequest::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // CrossOrderCancelRequest::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // CrossOrderCancelRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CrossOrderCancelRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // CrossOrderCancelRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CrossOrderCancelRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CrossOrderCancelRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // CrossOrderCancelRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // CrossOrderCancelRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // CrossOrderCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // CrossOrderCancelRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // CrossOrderCancelRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRootPartyIDs (1116), application, 4 fields, 1 group, shares static data, hash: 0x8e431122
   // CrossOrderCancelRequest::NoRootPartyIDs
   class NoRootPartyIDs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1116 };

      NoRootPartyIDs() : GroupBase(_fnum) {}
      ~NoRootPartyIDs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1120, new NoRootPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoRootPartySubIDs (1120), application, 2 fields, 0 groups, shares static data, hash: 0x238f8b1b
      // CrossOrderCancelRequest::NoRootPartyIDs::NoRootPartySubIDs
      class NoRootPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1120 };

         NoRootPartySubIDs() : GroupBase(_fnum) {}
         ~NoRootPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // CrossOrderCancelRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // CrossOrderCancelRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // CrossOrderCancelRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityTypeRequest (v), application, 11 fields, 0 groups.
class SecurityTypeRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityTypeRequest() : Message(ctx(), _msgtype(), _traits, 11, &_ftha) {}
   ~SecurityTypeRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SecurityTypes (w), application, 18 fields, 1 group.
class SecurityTypes : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityTypes() : Message(ctx(), _msgtype(), _traits, 18, &_ftha)
   {
      _groups.insert({558, new NoSecurityTypes });
   }
   ~SecurityTypes() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityTypes (558), application, 5 fields, 0 groups, is unique, hash: 0x35622993
   // SecurityTypes::NoSecurityTypes
   class NoSecurityTypes : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 558 };

      NoSecurityTypes() : GroupBase(_fnum) {}
      ~NoSecurityTypes() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityListRequest (x), application, 116 fields, 7 groups.
class SecurityListRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityListRequest() : Message(ctx(), _msgtype(), _traits, 116, &_ftha)
   {
      _groups.insert({
         { 454, new NoSecurityAltID },
         { 555, new NoLegs },
         { 711, new NoUnderlyings },
         { 864, new NoEvents },
         { 870, new NoInstrAttrib },
         { 1018, new NoInstrumentParties },
         { 1483, new NoComplexEvents },
      });
   }
   ~SecurityListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityListRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 54 fields, 1 group, shares static data, hash: 0xcb99d024
   // SecurityListRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 54, &_ftha));
         mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityListRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
   // SecurityListRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
         mb->get_groups().insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
            { 1058, new NoUndlyInstrumentParties },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityListRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityListRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
      // SecurityListRequest::NoUnderlyings::NoUndlyInstrumentParties
      class NoUndlyInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1058 };

         NoUndlyInstrumentParties() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
         // SecurityListRequest::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
         class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1062 };

            NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
   // SecurityListRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityListRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
   // SecurityListRequest::NoInstrumentParties
   class NoInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1018 };

      NoInstrumentParties() : GroupBase(_fnum) {}
      ~NoInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
      // SecurityListRequest::NoInstrumentParties::NoInstrumentPartySubIDs
      class NoInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1052 };

         NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
   // SecurityListRequest::NoComplexEvents
   class NoComplexEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1483 };

      NoComplexEvents() : GroupBase(_fnum) {}
      ~NoComplexEvents() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
         mb->get_groups().insert({1491, new NoComplexEventDates });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
      // SecurityListRequest::NoComplexEvents::NoComplexEventDates
      class NoComplexEventDates : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1491 };

         NoComplexEventDates() : GroupBase(_fnum) {}
         ~NoComplexEventDates() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
            mb->get_groups().insert({1494, new NoComplexEventTimes });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
         // SecurityListRequest::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
         class NoComplexEventTimes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1494 };

            NoComplexEventTimes() : GroupBase(_fnum) {}
            ~NoComplexEventTimes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityList (y), application, 22 fields, 1 group.
class SecurityList : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   SecurityList() : Message(ctx(), _msgtype(), _traits, 22, &_ftha)
   {
      _groups.insert({146, new NoRelatedSym });
   }
   ~SecurityList() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoRelatedSym (146), application, 141 fields, 13 groups, is unique, hash: 0x78c9bdd4
   // SecurityList::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static const FieldTrait _traits[];
      static const FieldTrait_Hash_Array _ftha;
      static const MsgType _msgtype;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 141, &_ftha));
         mb->get_groups().insert({
            { 232, new NoStipulations },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
            { 1018, new NoInstrumentParties },
            { 1201, new NoStrikeRules },
            { 1205, new NoTickRules },
            { 1234, new NoLotTypeRules },
            { 1309, new NoTradingSessionRules },
            { 1312, new NoNestedInstrAttrib },
            { 1483, new NoComplexEvents },
         });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // SecurityList::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // SecurityList::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 62 fields, 2 groups, shares static data, hash: 0x604fb052
      // SecurityList::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 62, &_ftha));
            mb->get_groups().insert({
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // SecurityList::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // SecurityList::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 72 fields, 3 groups, shares static data, hash: 0xb078f5a8
      // SecurityList::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 72, &_ftha));
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
               { 1058, new NoUndlyInstrumentParties },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // SecurityList::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // SecurityList::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
         // SecurityList::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties
         class NoUndlyInstrumentParties : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1058 };

            NoUndlyInstrumentParties() : GroupBase(_fnum) {}
            ~NoUndlyInstrumentParties() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
               mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
            // SecurityList::NoRelatedSym::NoUnderlyings::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
            class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1062 };

               NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
               ~NoUndlyInstrumentPartySubIDs() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoEvents (864), application, 5 fields, 0 groups, shares static data, hash: 0xfc9cd015
      // SecurityList::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // SecurityList::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrumentParties (1018), application, 4 fields, 1 group, shares static data, hash: 0x73c90a7e
      // SecurityList::NoRelatedSym::NoInstrumentParties
      class NoInstrumentParties : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1018 };

         NoInstrumentParties() : GroupBase(_fnum) {}
         ~NoInstrumentParties() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
            mb->get_groups().insert({1052, new NoInstrumentPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoInstrumentPartySubIDs (1052), application, 2 fields, 0 groups, shares static data, hash: 0x23800484
         // SecurityList::NoRelatedSym::NoInstrumentParties::NoInstrumentPartySubIDs
         class NoInstrumentPartySubIDs : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1052 };

            NoInstrumentPartySubIDs() : GroupBase(_fnum) {}
            ~NoInstrumentPartySubIDs() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoStrikeRules (1201), application, 6 fields, 1 group, shares static data, hash: 0x59ddebb
      // SecurityList::NoRelatedSym::NoStrikeRules
      class NoStrikeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1201 };

         NoStrikeRules() : GroupBase(_fnum) {}
         ~NoStrikeRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha));
            mb->get_groups().insert({1236, new NoMaturityRules });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMaturityRules (1236), application, 6 fields, 0 groups, shares static data, hash: 0x1770b19b
         // SecurityList::NoRelatedSym::NoStrikeRules::NoMaturityRules
         class NoMaturityRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1236 };

            NoMaturityRules() : GroupBase(_fnum) {}
            ~NoMaturityRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 6, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoTickRules (1205), application, 4 fields, 0 groups, shares static data, hash: 0xe7ffa6df
      // SecurityList::NoRelatedSym::NoTickRules
      class NoTickRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1205 };

         NoTickRules() : GroupBase(_fnum) {}
         ~NoTickRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLotTypeRules (1234), application, 2 fields, 0 groups, shares static data, hash: 0x238b0f1b
      // SecurityList::NoRelatedSym::NoLotTypeRules
      class NoLotTypeRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1234 };

         NoLotTypeRules() : GroupBase(_fnum) {}
         ~NoLotTypeRules() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessionRules (1309), application, 7 fields, 5 groups, shares static data, hash: 0xba87223e
      // SecurityList::NoRelatedSym::NoTradingSessionRules
      class NoTradingSessionRules : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1309 };

         NoTradingSessionRules() : GroupBase(_fnum) {}
         ~NoTradingSessionRules() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 7, &_ftha));
            mb->get_groups().insert({
               { 1141, new NoMDFeedTypes },
               { 1232, new NoExecInstRules },
               { 1235, new NoMatchRules },
               { 1237, new NoOrdTypeRules },
               { 1239, new NoTimeInForceRules },
            });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoMDFeedTypes (1141), application, 3 fields, 0 groups, shares static data, hash: 0x8f18cded
         // SecurityList::NoRelatedSym::NoTradingSessionRules::NoMDFeedTypes
         class NoMDFeedTypes : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1141 };

            NoMDFeedTypes() : GroupBase(_fnum) {}
            ~NoMDFeedTypes() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoExecInstRules (1232), application, 1 field, 0 groups, shares static data, hash: 0x80001d1d
         // SecurityList::NoRelatedSym::NoTradingSessionRules::NoExecInstRules
         class NoExecInstRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1232 };

            NoExecInstRules() : GroupBase(_fnum) {}
            ~NoExecInstRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoMatchRules (1235), application, 2 fields, 0 groups, shares static data, hash: 0x2344a727
         // SecurityList::NoRelatedSym::NoTradingSessionRules::NoMatchRules
         class NoMatchRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1235 };

            NoMatchRules() : GroupBase(_fnum) {}
            ~NoMatchRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoOrdTypeRules (1237), application, 1 field, 0 groups, shares static data, hash: 0x80001829
         // SecurityList::NoRelatedSym::NoTradingSessionRules::NoOrdTypeRules
         class NoOrdTypeRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1237 };

            NoOrdTypeRules() : GroupBase(_fnum) {}
            ~NoOrdTypeRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoTimeInForceRules (1239), application, 1 field, 0 groups, shares static data, hash: 0x8000183a
         // SecurityList::NoRelatedSym::NoTradingSessionRules::NoTimeInForceRules
         class NoTimeInForceRules : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1239 };

            NoTimeInForceRules() : GroupBase(_fnum) {}
            ~NoTimeInForceRules() = default;
            MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 1, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoNestedInstrAttrib (1312), application, 2 fields, 0 groups, shares static data, hash: 0x2394f04f
      // SecurityList::NoRelatedSym::NoNestedInstrAttrib
      class NoNestedInstrAttrib : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1312 };

         NoNestedInstrAttrib() : GroupBase(_fnum) {}
         ~NoNestedInstrAttrib() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoComplexEvents (1483), application, 8 fields, 1 group, shares static data, hash: 0xeafe7f40
      // SecurityList::NoRelatedSym::NoComplexEvents
      class NoComplexEvents : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1483 };

         NoComplexEvents() : GroupBase(_fnum) {}
         ~NoComplexEvents() = default;
         MessageBase *create_group() const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 8, &_ftha));
            mb->get_groups().insert({1491, new NoComplexEventDates });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         /// NoComplexEventDates (1491), application, 3 fields, 1 group, shares static data, hash: 0x55f5f9f0
         // SecurityList::NoRelatedSym::NoComplexEvents::NoComplexEventDates
         class NoComplexEventDates : public GroupBase // depth: 3
         {
            static const FieldTrait *_traits;
            static const FieldTrait_Hash_Array& _ftha;
            static const MsgType& _msgtype;

         public:
            enum { _fnum = 1491 };

            NoComplexEventDates() : GroupBase(_fnum) {}
            ~NoComplexEventDates() = default;
            MessageBase *create_group() const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 3, &_ftha));
               mb->get_groups().insert({1494, new NoComplexEventTimes });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            /// NoComplexEventTimes (1494), application, 2 fields, 0 groups, shares static data, hash: 0x23b97dba
            // SecurityList::NoRelatedSym::NoComplexEvents::NoComplexEventDates::NoComplexEventTimes
            class NoComplexEventTimes : public GroupBase // depth: 4
            {
               static const FieldTrait *_traits;
               static const FieldTrait_Hash_Array& _ftha;
               static const MsgType& _msgtype;

            public:
               enum { _fnum = 1494 };

               NoComplexEventTimes() : GroupBase(_fnum) {}
               ~NoComplexEventTimes() = default;
               MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// DerivativeSecurityListRequest (z), application, 146 fields, 6 groups.
class DerivativeSecurityListRequest : public Message
{
   static const FieldTrait _traits[];
   static const FieldTrait_Hash_Array _ftha;
   static const MsgType _msgtype;

public:
   DerivativeSecurityListRequest() : Message(ctx(), _msgtype(), _traits, 146, &_ftha)
   {
      _groups.insert({
         { 457, new NoUnderlyingSecurityAltID },
         { 887, new NoUnderlyingStips },
         { 1058, new NoUndlyInstrumentParties },
         { 1218, new NoDerivativeSecurityAltID },
         { 1286, new NoDerivativeEvents },
         { 1292, new NoDerivativeInstrumentParties },
      });
   }
   ~DerivativeSecurityListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Myfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // DerivativeSecurityListRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // DerivativeSecurityListRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUndlyInstrumentParties (1058), application, 4 fields, 1 group, shares static data, hash: 0x1f519834
   // DerivativeSecurityListRequest::NoUndlyInstrumentParties
   class NoUndlyInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1058 };

      NoUndlyInstrumentParties() : GroupBase(_fnum) {}
      ~NoUndlyInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1062, new NoUndlyInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoUndlyInstrumentPartySubIDs (1062), application, 2 fields, 0 groups, shares static data, hash: 0x238743c6
      // DerivativeSecurityListRequest::NoUndlyInstrumentParties::NoUndlyInstrumentPartySubIDs
      class NoUndlyInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1062 };

         NoUndlyInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoUndlyInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDerivativeSecurityAltID (1218), application, 2 fields, 0 groups, shares static data, hash: 0x239bdf77
   // DerivativeSecurityListRequest::NoDerivativeSecurityAltID
   class NoDerivativeSecurityAltID : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1218 };

      NoDerivativeSecurityAltID() : GroupBase(_fnum) {}
      ~NoDerivativeSecurityAltID() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeEvents (1286), application, 5 fields, 0 groups, shares static data, hash: 0x5503a1a4
   // DerivativeSecurityListRequest::NoDerivativeEvents
   class NoDerivativeEvents : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1286 };

      NoDerivativeEvents() : GroupBase(_fnum) {}
      ~NoDerivativeEvents() = default;
      MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 5, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoDerivativeInstrumentParties (1292), application, 4 fields, 1 group, shares static data, hash: 0x73c2c1fa
   // DerivativeSecurityListRequest::NoDerivativeInstrumentParties
   class NoDerivativeInstrumentParties : public GroupBase // depth: 1
   {
      static const FieldTrait *_traits;
      static const FieldTrait_Hash_Array& _ftha;
      static const MsgType& _msgtype;

   public:
      enum { _fnum = 1292 };

      NoDerivativeInstrumentParties() : GroupBase(_fnum) {}
      ~NoDerivativeInstrumentParties() = default;
      MessageBase *create_group() const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, 4, &_ftha));
         mb->get_groups().insert({1296, new NoDerivativeInstrumentPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      /// NoDerivativeInstrumentPartySubIDs (1296), application, 2 fields, 0 groups, shares static data, hash: 0x23a1a547
      // DerivativeSecurityListRequest::NoDerivativeInstrumentParties::NoDerivativeInstrumentPartySubIDs
      class NoDerivativeInstrumentPartySubIDs : public GroupBase // depth: 2
      {
         static const FieldTrait *_traits;
         static const FieldTrait_Hash_Array& _ftha;
         static const MsgType& _msgtype;

      public:
         enum { _fnum = 1296 };

         NoDerivativeInstrumentPartySubIDs() : GroupBase(_fnum) {}
         ~NoDerivativeInstrumentPartySubIDs() = default;
         MessageBase *create_group() const { return new MessageBase(ctx(), _msgtype(), _traits, 2, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------

} // namespace TEX
} // namespace FIX8
#endif // FIX8_4D796669785F636C61737365732E687070_
